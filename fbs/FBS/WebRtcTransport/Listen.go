// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebRtcTransport

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

type Listen byte

const (
	ListenNONE             Listen = 0
	ListenListenIndividual Listen = 1
	ListenListenServer     Listen = 2
)

var EnumNamesListen = map[Listen]string{
	ListenNONE:             "NONE",
	ListenListenIndividual: "ListenIndividual",
	ListenListenServer:     "ListenServer",
}

var EnumValuesListen = map[string]Listen{
	"NONE":             ListenNONE,
	"ListenIndividual": ListenListenIndividual,
	"ListenServer":     ListenListenServer,
}

func (v Listen) String() string {
	if s, ok := EnumNamesListen[v]; ok {
		return s
	}
	return "Listen(" + strconv.FormatInt(int64(v), 10) + ")"
}

type ListenT struct {
	Type Listen
	Value interface{}
}

func (t *ListenT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case ListenListenIndividual:
		return t.Value.(*ListenIndividualT).Pack(builder)
	case ListenListenServer:
		return t.Value.(*ListenServerT).Pack(builder)
	}
	return 0
}

func (rcv Listen) UnPack(table flatbuffers.Table) *ListenT {
	switch rcv {
	case ListenListenIndividual:
		var x ListenIndividual
		x.Init(table.Bytes, table.Pos)
		return &ListenT{Type: ListenListenIndividual, Value: x.UnPack()}
	case ListenListenServer:
		var x ListenServer
		x.Init(table.Bytes, table.Pos)
		return &ListenT{Type: ListenListenServer, Value: x.UnPack()}
	}
	return nil
}
