// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebRtcTransport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IceParametersT struct {
	UsernameFragment string `json:"username_fragment"`
	Password string `json:"password"`
	IceLite bool `json:"ice_lite"`
}

func (t *IceParametersT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	usernameFragmentOffset := flatbuffers.UOffsetT(0)
	if t.UsernameFragment != "" {
		usernameFragmentOffset = builder.CreateString(t.UsernameFragment)
	}
	passwordOffset := flatbuffers.UOffsetT(0)
	if t.Password != "" {
		passwordOffset = builder.CreateString(t.Password)
	}
	IceParametersStart(builder)
	IceParametersAddUsernameFragment(builder, usernameFragmentOffset)
	IceParametersAddPassword(builder, passwordOffset)
	IceParametersAddIceLite(builder, t.IceLite)
	return IceParametersEnd(builder)
}

func (rcv *IceParameters) UnPackTo(t *IceParametersT) {
	t.UsernameFragment = string(rcv.UsernameFragment())
	t.Password = string(rcv.Password())
	t.IceLite = rcv.IceLite()
}

func (rcv *IceParameters) UnPack() *IceParametersT {
	if rcv == nil {
		return nil
	}
	t := &IceParametersT{}
	rcv.UnPackTo(t)
	return t
}

type IceParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsIceParameters(buf []byte, offset flatbuffers.UOffsetT) *IceParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IceParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishIceParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsIceParameters(buf []byte, offset flatbuffers.UOffsetT) *IceParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IceParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIceParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *IceParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IceParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IceParameters) UsernameFragment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IceParameters) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IceParameters) IceLite() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *IceParameters) MutateIceLite(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func IceParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func IceParametersAddUsernameFragment(builder *flatbuffers.Builder, usernameFragment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(usernameFragment), 0)
}
func IceParametersAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(password), 0)
}
func IceParametersAddIceLite(builder *flatbuffers.Builder, iceLite bool) {
	builder.PrependBoolSlot(2, iceLite, true)
}
func IceParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
