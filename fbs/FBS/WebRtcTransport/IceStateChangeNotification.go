// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebRtcTransport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IceStateChangeNotificationT struct {
	IceState IceState `json:"ice_state"`
}

func (t *IceStateChangeNotificationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	IceStateChangeNotificationStart(builder)
	IceStateChangeNotificationAddIceState(builder, t.IceState)
	return IceStateChangeNotificationEnd(builder)
}

func (rcv *IceStateChangeNotification) UnPackTo(t *IceStateChangeNotificationT) {
	t.IceState = rcv.IceState()
}

func (rcv *IceStateChangeNotification) UnPack() *IceStateChangeNotificationT {
	if rcv == nil {
		return nil
	}
	t := &IceStateChangeNotificationT{}
	rcv.UnPackTo(t)
	return t
}

type IceStateChangeNotification struct {
	_tab flatbuffers.Table
}

func GetRootAsIceStateChangeNotification(buf []byte, offset flatbuffers.UOffsetT) *IceStateChangeNotification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IceStateChangeNotification{}
	x.Init(buf, n+offset)
	return x
}

func FinishIceStateChangeNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsIceStateChangeNotification(buf []byte, offset flatbuffers.UOffsetT) *IceStateChangeNotification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IceStateChangeNotification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIceStateChangeNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *IceStateChangeNotification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IceStateChangeNotification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IceStateChangeNotification) IceState() IceState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return IceState(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *IceStateChangeNotification) MutateIceState(n IceState) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func IceStateChangeNotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func IceStateChangeNotificationAddIceState(builder *flatbuffers.Builder, iceState IceState) {
	builder.PrependByteSlot(0, byte(iceState), 0)
}
func IceStateChangeNotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
