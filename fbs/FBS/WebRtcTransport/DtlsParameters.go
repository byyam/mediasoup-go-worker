// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebRtcTransport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DtlsParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsDtlsParameters(buf []byte, offset flatbuffers.UOffsetT) *DtlsParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DtlsParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishDtlsParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDtlsParameters(buf []byte, offset flatbuffers.UOffsetT) *DtlsParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DtlsParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDtlsParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DtlsParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DtlsParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DtlsParameters) Fingerprints(obj *Fingerprint, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DtlsParameters) FingerprintsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DtlsParameters) Role() DtlsRole {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return DtlsRole(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DtlsParameters) MutateRole(n DtlsRole) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func DtlsParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DtlsParametersAddFingerprints(builder *flatbuffers.Builder, fingerprints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fingerprints), 0)
}
func DtlsParametersStartFingerprintsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DtlsParametersAddRole(builder *flatbuffers.Builder, role DtlsRole) {
	builder.PrependByteSlot(1, byte(role), 0)
}
func DtlsParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
