// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Consumer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConsumerScoreT struct {
	Score byte `json:"score"`
	ProducerScore byte `json:"producer_score"`
	ProducerScores []byte `json:"producer_scores"`
}

func (t *ConsumerScoreT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	producerScoresOffset := flatbuffers.UOffsetT(0)
	if t.ProducerScores != nil {
		producerScoresOffset = builder.CreateByteString(t.ProducerScores)
	}
	ConsumerScoreStart(builder)
	ConsumerScoreAddScore(builder, t.Score)
	ConsumerScoreAddProducerScore(builder, t.ProducerScore)
	ConsumerScoreAddProducerScores(builder, producerScoresOffset)
	return ConsumerScoreEnd(builder)
}

func (rcv *ConsumerScore) UnPackTo(t *ConsumerScoreT) {
	t.Score = rcv.Score()
	t.ProducerScore = rcv.ProducerScore()
	t.ProducerScores = rcv.ProducerScoresBytes()
}

func (rcv *ConsumerScore) UnPack() *ConsumerScoreT {
	if rcv == nil {
		return nil
	}
	t := &ConsumerScoreT{}
	rcv.UnPackTo(t)
	return t
}

type ConsumerScore struct {
	_tab flatbuffers.Table
}

func GetRootAsConsumerScore(buf []byte, offset flatbuffers.UOffsetT) *ConsumerScore {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsumerScore{}
	x.Init(buf, n+offset)
	return x
}

func FinishConsumerScoreBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConsumerScore(buf []byte, offset flatbuffers.UOffsetT) *ConsumerScore {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConsumerScore{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConsumerScoreBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConsumerScore) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsumerScore) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsumerScore) Score() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConsumerScore) MutateScore(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *ConsumerScore) ProducerScore() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConsumerScore) MutateProducerScore(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *ConsumerScore) ProducerScores(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ConsumerScore) ProducerScoresLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConsumerScore) ProducerScoresBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConsumerScore) MutateProducerScores(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ConsumerScoreStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ConsumerScoreAddScore(builder *flatbuffers.Builder, score byte) {
	builder.PrependByteSlot(0, score, 0)
}
func ConsumerScoreAddProducerScore(builder *flatbuffers.Builder, producerScore byte) {
	builder.PrependByteSlot(1, producerScore, 0)
}
func ConsumerScoreAddProducerScores(builder *flatbuffers.Builder, producerScores flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(producerScores), 0)
}
func ConsumerScoreStartProducerScoresVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ConsumerScoreEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
