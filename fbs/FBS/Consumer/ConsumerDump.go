// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Consumer

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__RtpStream "github.com/byyam/mediasoup-go-worker/fbs/FBS/RtpStream"
)

type ConsumerDumpT struct {
	Base *BaseConsumerDumpT `json:"base"`
	RtpStreams []*FBS__RtpStream.DumpT `json:"rtp_streams"`
	PreferredSpatialLayer *int16 `json:"preferred_spatial_layer"`
	TargetSpatialLayer *int16 `json:"target_spatial_layer"`
	CurrentSpatialLayer *int16 `json:"current_spatial_layer"`
	PreferredTemporalLayer *int16 `json:"preferred_temporal_layer"`
	TargetTemporalLayer *int16 `json:"target_temporal_layer"`
	CurrentTemporalLayer *int16 `json:"current_temporal_layer"`
}

func (t *ConsumerDumpT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	baseOffset := t.Base.Pack(builder)
	rtpStreamsOffset := flatbuffers.UOffsetT(0)
	if t.RtpStreams != nil {
		rtpStreamsLength := len(t.RtpStreams)
		rtpStreamsOffsets := make([]flatbuffers.UOffsetT, rtpStreamsLength)
		for j := 0; j < rtpStreamsLength; j++ {
			rtpStreamsOffsets[j] = t.RtpStreams[j].Pack(builder)
		}
		ConsumerDumpStartRtpStreamsVector(builder, rtpStreamsLength)
		for j := rtpStreamsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rtpStreamsOffsets[j])
		}
		rtpStreamsOffset = builder.EndVector(rtpStreamsLength)
	}
	ConsumerDumpStart(builder)
	ConsumerDumpAddBase(builder, baseOffset)
	ConsumerDumpAddRtpStreams(builder, rtpStreamsOffset)
	if t.PreferredSpatialLayer != nil {
		ConsumerDumpAddPreferredSpatialLayer(builder, *t.PreferredSpatialLayer)
	}
	if t.TargetSpatialLayer != nil {
		ConsumerDumpAddTargetSpatialLayer(builder, *t.TargetSpatialLayer)
	}
	if t.CurrentSpatialLayer != nil {
		ConsumerDumpAddCurrentSpatialLayer(builder, *t.CurrentSpatialLayer)
	}
	if t.PreferredTemporalLayer != nil {
		ConsumerDumpAddPreferredTemporalLayer(builder, *t.PreferredTemporalLayer)
	}
	if t.TargetTemporalLayer != nil {
		ConsumerDumpAddTargetTemporalLayer(builder, *t.TargetTemporalLayer)
	}
	if t.CurrentTemporalLayer != nil {
		ConsumerDumpAddCurrentTemporalLayer(builder, *t.CurrentTemporalLayer)
	}
	return ConsumerDumpEnd(builder)
}

func (rcv *ConsumerDump) UnPackTo(t *ConsumerDumpT) {
	t.Base = rcv.Base(nil).UnPack()
	rtpStreamsLength := rcv.RtpStreamsLength()
	t.RtpStreams = make([]*FBS__RtpStream.DumpT, rtpStreamsLength)
	for j := 0; j < rtpStreamsLength; j++ {
		x := FBS__RtpStream.Dump{}
		rcv.RtpStreams(&x, j)
		t.RtpStreams[j] = x.UnPack()
	}
	t.PreferredSpatialLayer = rcv.PreferredSpatialLayer()
	t.TargetSpatialLayer = rcv.TargetSpatialLayer()
	t.CurrentSpatialLayer = rcv.CurrentSpatialLayer()
	t.PreferredTemporalLayer = rcv.PreferredTemporalLayer()
	t.TargetTemporalLayer = rcv.TargetTemporalLayer()
	t.CurrentTemporalLayer = rcv.CurrentTemporalLayer()
}

func (rcv *ConsumerDump) UnPack() *ConsumerDumpT {
	if rcv == nil {
		return nil
	}
	t := &ConsumerDumpT{}
	rcv.UnPackTo(t)
	return t
}

type ConsumerDump struct {
	_tab flatbuffers.Table
}

func GetRootAsConsumerDump(buf []byte, offset flatbuffers.UOffsetT) *ConsumerDump {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsumerDump{}
	x.Init(buf, n+offset)
	return x
}

func FinishConsumerDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConsumerDump(buf []byte, offset flatbuffers.UOffsetT) *ConsumerDump {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConsumerDump{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConsumerDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConsumerDump) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsumerDump) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsumerDump) Base(obj *BaseConsumerDump) *BaseConsumerDump {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(BaseConsumerDump)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ConsumerDump) RtpStreams(obj *FBS__RtpStream.Dump, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ConsumerDump) RtpStreamsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConsumerDump) PreferredSpatialLayer() *int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		v := rcv._tab.GetInt16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *ConsumerDump) MutatePreferredSpatialLayer(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *ConsumerDump) TargetSpatialLayer() *int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		v := rcv._tab.GetInt16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *ConsumerDump) MutateTargetSpatialLayer(n int16) bool {
	return rcv._tab.MutateInt16Slot(10, n)
}

func (rcv *ConsumerDump) CurrentSpatialLayer() *int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		v := rcv._tab.GetInt16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *ConsumerDump) MutateCurrentSpatialLayer(n int16) bool {
	return rcv._tab.MutateInt16Slot(12, n)
}

func (rcv *ConsumerDump) PreferredTemporalLayer() *int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		v := rcv._tab.GetInt16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *ConsumerDump) MutatePreferredTemporalLayer(n int16) bool {
	return rcv._tab.MutateInt16Slot(14, n)
}

func (rcv *ConsumerDump) TargetTemporalLayer() *int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		v := rcv._tab.GetInt16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *ConsumerDump) MutateTargetTemporalLayer(n int16) bool {
	return rcv._tab.MutateInt16Slot(16, n)
}

func (rcv *ConsumerDump) CurrentTemporalLayer() *int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		v := rcv._tab.GetInt16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *ConsumerDump) MutateCurrentTemporalLayer(n int16) bool {
	return rcv._tab.MutateInt16Slot(18, n)
}

func ConsumerDumpStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ConsumerDumpAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func ConsumerDumpAddRtpStreams(builder *flatbuffers.Builder, rtpStreams flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rtpStreams), 0)
}
func ConsumerDumpStartRtpStreamsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConsumerDumpAddPreferredSpatialLayer(builder *flatbuffers.Builder, preferredSpatialLayer int16) {
	builder.PrependInt16(preferredSpatialLayer)
	builder.Slot(2)
}
func ConsumerDumpAddTargetSpatialLayer(builder *flatbuffers.Builder, targetSpatialLayer int16) {
	builder.PrependInt16(targetSpatialLayer)
	builder.Slot(3)
}
func ConsumerDumpAddCurrentSpatialLayer(builder *flatbuffers.Builder, currentSpatialLayer int16) {
	builder.PrependInt16(currentSpatialLayer)
	builder.Slot(4)
}
func ConsumerDumpAddPreferredTemporalLayer(builder *flatbuffers.Builder, preferredTemporalLayer int16) {
	builder.PrependInt16(preferredTemporalLayer)
	builder.Slot(5)
}
func ConsumerDumpAddTargetTemporalLayer(builder *flatbuffers.Builder, targetTemporalLayer int16) {
	builder.PrependInt16(targetTemporalLayer)
	builder.Slot(6)
}
func ConsumerDumpAddCurrentTemporalLayer(builder *flatbuffers.Builder, currentTemporalLayer int16) {
	builder.PrependInt16(currentTemporalLayer)
	builder.Slot(7)
}
func ConsumerDumpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
