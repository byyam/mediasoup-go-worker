// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Consumer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScoreNotificationT struct {
	Score *ConsumerScoreT `json:"score"`
}

func (t *ScoreNotificationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	scoreOffset := t.Score.Pack(builder)
	ScoreNotificationStart(builder)
	ScoreNotificationAddScore(builder, scoreOffset)
	return ScoreNotificationEnd(builder)
}

func (rcv *ScoreNotification) UnPackTo(t *ScoreNotificationT) {
	t.Score = rcv.Score(nil).UnPack()
}

func (rcv *ScoreNotification) UnPack() *ScoreNotificationT {
	if rcv == nil {
		return nil
	}
	t := &ScoreNotificationT{}
	rcv.UnPackTo(t)
	return t
}

type ScoreNotification struct {
	_tab flatbuffers.Table
}

func GetRootAsScoreNotification(buf []byte, offset flatbuffers.UOffsetT) *ScoreNotification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScoreNotification{}
	x.Init(buf, n+offset)
	return x
}

func FinishScoreNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsScoreNotification(buf []byte, offset flatbuffers.UOffsetT) *ScoreNotification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ScoreNotification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedScoreNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ScoreNotification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScoreNotification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ScoreNotification) Score(obj *ConsumerScore) *ConsumerScore {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ConsumerScore)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ScoreNotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ScoreNotificationAddScore(builder *flatbuffers.Builder, score flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(score), 0)
}
func ScoreNotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
