// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Consumer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConsumerLayers struct {
	_tab flatbuffers.Table
}

func GetRootAsConsumerLayers(buf []byte, offset flatbuffers.UOffsetT) *ConsumerLayers {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsumerLayers{}
	x.Init(buf, n+offset)
	return x
}

func FinishConsumerLayersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConsumerLayers(buf []byte, offset flatbuffers.UOffsetT) *ConsumerLayers {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConsumerLayers{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConsumerLayersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConsumerLayers) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsumerLayers) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsumerLayers) SpatialLayer() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConsumerLayers) MutateSpatialLayer(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *ConsumerLayers) TemporalLayer() *byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		v := rcv._tab.GetByte(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *ConsumerLayers) MutateTemporalLayer(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func ConsumerLayersStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ConsumerLayersAddSpatialLayer(builder *flatbuffers.Builder, spatialLayer byte) {
	builder.PrependByteSlot(0, spatialLayer, 0)
}
func ConsumerLayersAddTemporalLayer(builder *flatbuffers.Builder, temporalLayer byte) {
	builder.PrependByte(temporalLayer)
	builder.Slot(1)
}
func ConsumerLayersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
