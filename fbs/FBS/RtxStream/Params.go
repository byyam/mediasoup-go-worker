// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtxStream

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ParamsT struct {
	Ssrc uint32 `json:"ssrc"`
	PayloadType byte `json:"payload_type"`
	MimeType string `json:"mime_type"`
	ClockRate uint32 `json:"clock_rate"`
	Rrid string `json:"rrid"`
	Cname string `json:"cname"`
}

func (t *ParamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	mimeTypeOffset := flatbuffers.UOffsetT(0)
	if t.MimeType != "" {
		mimeTypeOffset = builder.CreateString(t.MimeType)
	}
	rridOffset := flatbuffers.UOffsetT(0)
	if t.Rrid != "" {
		rridOffset = builder.CreateString(t.Rrid)
	}
	cnameOffset := flatbuffers.UOffsetT(0)
	if t.Cname != "" {
		cnameOffset = builder.CreateString(t.Cname)
	}
	ParamsStart(builder)
	ParamsAddSsrc(builder, t.Ssrc)
	ParamsAddPayloadType(builder, t.PayloadType)
	ParamsAddMimeType(builder, mimeTypeOffset)
	ParamsAddClockRate(builder, t.ClockRate)
	ParamsAddRrid(builder, rridOffset)
	ParamsAddCname(builder, cnameOffset)
	return ParamsEnd(builder)
}

func (rcv *Params) UnPackTo(t *ParamsT) {
	t.Ssrc = rcv.Ssrc()
	t.PayloadType = rcv.PayloadType()
	t.MimeType = string(rcv.MimeType())
	t.ClockRate = rcv.ClockRate()
	t.Rrid = string(rcv.Rrid())
	t.Cname = string(rcv.Cname())
}

func (rcv *Params) UnPack() *ParamsT {
	if rcv == nil {
		return nil
	}
	t := &ParamsT{}
	rcv.UnPackTo(t)
	return t
}

type Params struct {
	_tab flatbuffers.Table
}

func GetRootAsParams(buf []byte, offset flatbuffers.UOffsetT) *Params {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Params{}
	x.Init(buf, n+offset)
	return x
}

func FinishParamsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsParams(buf []byte, offset flatbuffers.UOffsetT) *Params {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Params{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedParamsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Params) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Params) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Params) Ssrc() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutateSsrc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Params) PayloadType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutatePayloadType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Params) MimeType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Params) ClockRate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutateClockRate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *Params) Rrid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Params) Cname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ParamsAddSsrc(builder *flatbuffers.Builder, ssrc uint32) {
	builder.PrependUint32Slot(0, ssrc, 0)
}
func ParamsAddPayloadType(builder *flatbuffers.Builder, payloadType byte) {
	builder.PrependByteSlot(1, payloadType, 0)
}
func ParamsAddMimeType(builder *flatbuffers.Builder, mimeType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mimeType), 0)
}
func ParamsAddClockRate(builder *flatbuffers.Builder, clockRate uint32) {
	builder.PrependUint32Slot(3, clockRate, 0)
}
func ParamsAddRrid(builder *flatbuffers.Builder, rrid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(rrid), 0)
}
func ParamsAddCname(builder *flatbuffers.Builder, cname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(cname), 0)
}
func ParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
