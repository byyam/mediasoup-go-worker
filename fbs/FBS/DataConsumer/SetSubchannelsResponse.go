// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataConsumer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SetSubchannelsResponseT struct {
	Subchannels []uint16 `json:"subchannels"`
}

func (t *SetSubchannelsResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	subchannelsOffset := flatbuffers.UOffsetT(0)
	if t.Subchannels != nil {
		subchannelsLength := len(t.Subchannels)
		SetSubchannelsResponseStartSubchannelsVector(builder, subchannelsLength)
		for j := subchannelsLength - 1; j >= 0; j-- {
			builder.PrependUint16(t.Subchannels[j])
		}
		subchannelsOffset = builder.EndVector(subchannelsLength)
	}
	SetSubchannelsResponseStart(builder)
	SetSubchannelsResponseAddSubchannels(builder, subchannelsOffset)
	return SetSubchannelsResponseEnd(builder)
}

func (rcv *SetSubchannelsResponse) UnPackTo(t *SetSubchannelsResponseT) {
	subchannelsLength := rcv.SubchannelsLength()
	t.Subchannels = make([]uint16, subchannelsLength)
	for j := 0; j < subchannelsLength; j++ {
		t.Subchannels[j] = rcv.Subchannels(j)
	}
}

func (rcv *SetSubchannelsResponse) UnPack() *SetSubchannelsResponseT {
	if rcv == nil {
		return nil
	}
	t := &SetSubchannelsResponseT{}
	rcv.UnPackTo(t)
	return t
}

type SetSubchannelsResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSetSubchannelsResponse(buf []byte, offset flatbuffers.UOffsetT) *SetSubchannelsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetSubchannelsResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishSetSubchannelsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSetSubchannelsResponse(buf []byte, offset flatbuffers.UOffsetT) *SetSubchannelsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetSubchannelsResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSetSubchannelsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SetSubchannelsResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetSubchannelsResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SetSubchannelsResponse) Subchannels(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *SetSubchannelsResponse) SubchannelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SetSubchannelsResponse) MutateSubchannels(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func SetSubchannelsResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SetSubchannelsResponseAddSubchannels(builder *flatbuffers.Builder, subchannels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(subchannels), 0)
}
func SetSubchannelsResponseStartSubchannelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func SetSubchannelsResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
