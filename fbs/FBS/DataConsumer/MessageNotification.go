// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataConsumer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageNotificationT struct {
	Ppid uint32 `json:"ppid"`
	Data []byte `json:"data"`
}

func (t *MessageNotificationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != nil {
		dataOffset = builder.CreateByteString(t.Data)
	}
	MessageNotificationStart(builder)
	MessageNotificationAddPpid(builder, t.Ppid)
	MessageNotificationAddData(builder, dataOffset)
	return MessageNotificationEnd(builder)
}

func (rcv *MessageNotification) UnPackTo(t *MessageNotificationT) {
	t.Ppid = rcv.Ppid()
	t.Data = rcv.DataBytes()
}

func (rcv *MessageNotification) UnPack() *MessageNotificationT {
	if rcv == nil {
		return nil
	}
	t := &MessageNotificationT{}
	rcv.UnPackTo(t)
	return t
}

type MessageNotification struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageNotification(buf []byte, offset flatbuffers.UOffsetT) *MessageNotification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageNotification{}
	x.Init(buf, n+offset)
	return x
}

func FinishMessageNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMessageNotification(buf []byte, offset flatbuffers.UOffsetT) *MessageNotification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageNotification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMessageNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MessageNotification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageNotification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageNotification) Ppid() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MessageNotification) MutatePpid(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MessageNotification) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *MessageNotification) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MessageNotification) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageNotification) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func MessageNotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MessageNotificationAddPpid(builder *flatbuffers.Builder, ppid uint32) {
	builder.PrependUint32Slot(0, ppid, 0)
}
func MessageNotificationAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func MessageNotificationStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func MessageNotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
