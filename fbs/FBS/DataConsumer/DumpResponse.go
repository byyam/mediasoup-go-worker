// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataConsumer

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__DataProducer "github.com/byyam/mediasoup-go-worker/fbs/FBS/DataProducer"
	FBS__SctpParameters "github.com/byyam/mediasoup-go-worker/fbs/FBS/SctpParameters"
)

type DumpResponseT struct {
	Id string `json:"id"`
	DataProducerId string `json:"data_producer_id"`
	Type FBS__DataProducer.Type `json:"type"`
	SctpStreamParameters *FBS__SctpParameters.SctpStreamParametersT `json:"sctp_stream_parameters"`
	Label string `json:"label"`
	Protocol string `json:"protocol"`
	BufferedAmountLowThreshold uint32 `json:"buffered_amount_low_threshold"`
	Paused bool `json:"paused"`
	DataProducerPaused bool `json:"data_producer_paused"`
	Subchannels []uint16 `json:"subchannels"`
}

func (t *DumpResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	idOffset := flatbuffers.UOffsetT(0)
	if t.Id != "" {
		idOffset = builder.CreateString(t.Id)
	}
	dataProducerIdOffset := flatbuffers.UOffsetT(0)
	if t.DataProducerId != "" {
		dataProducerIdOffset = builder.CreateString(t.DataProducerId)
	}
	sctpStreamParametersOffset := t.SctpStreamParameters.Pack(builder)
	labelOffset := flatbuffers.UOffsetT(0)
	if t.Label != "" {
		labelOffset = builder.CreateString(t.Label)
	}
	protocolOffset := flatbuffers.UOffsetT(0)
	if t.Protocol != "" {
		protocolOffset = builder.CreateString(t.Protocol)
	}
	subchannelsOffset := flatbuffers.UOffsetT(0)
	if t.Subchannels != nil {
		subchannelsLength := len(t.Subchannels)
		DumpResponseStartSubchannelsVector(builder, subchannelsLength)
		for j := subchannelsLength - 1; j >= 0; j-- {
			builder.PrependUint16(t.Subchannels[j])
		}
		subchannelsOffset = builder.EndVector(subchannelsLength)
	}
	DumpResponseStart(builder)
	DumpResponseAddId(builder, idOffset)
	DumpResponseAddDataProducerId(builder, dataProducerIdOffset)
	DumpResponseAddType(builder, t.Type)
	DumpResponseAddSctpStreamParameters(builder, sctpStreamParametersOffset)
	DumpResponseAddLabel(builder, labelOffset)
	DumpResponseAddProtocol(builder, protocolOffset)
	DumpResponseAddBufferedAmountLowThreshold(builder, t.BufferedAmountLowThreshold)
	DumpResponseAddPaused(builder, t.Paused)
	DumpResponseAddDataProducerPaused(builder, t.DataProducerPaused)
	DumpResponseAddSubchannels(builder, subchannelsOffset)
	return DumpResponseEnd(builder)
}

func (rcv *DumpResponse) UnPackTo(t *DumpResponseT) {
	t.Id = string(rcv.Id())
	t.DataProducerId = string(rcv.DataProducerId())
	t.Type = rcv.Type()
	t.SctpStreamParameters = rcv.SctpStreamParameters(nil).UnPack()
	t.Label = string(rcv.Label())
	t.Protocol = string(rcv.Protocol())
	t.BufferedAmountLowThreshold = rcv.BufferedAmountLowThreshold()
	t.Paused = rcv.Paused()
	t.DataProducerPaused = rcv.DataProducerPaused()
	subchannelsLength := rcv.SubchannelsLength()
	t.Subchannels = make([]uint16, subchannelsLength)
	for j := 0; j < subchannelsLength; j++ {
		t.Subchannels[j] = rcv.Subchannels(j)
	}
}

func (rcv *DumpResponse) UnPack() *DumpResponseT {
	if rcv == nil {
		return nil
	}
	t := &DumpResponseT{}
	rcv.UnPackTo(t)
	return t
}

type DumpResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDumpResponse(buf []byte, offset flatbuffers.UOffsetT) *DumpResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DumpResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishDumpResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDumpResponse(buf []byte, offset flatbuffers.UOffsetT) *DumpResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DumpResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDumpResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DumpResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DumpResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DumpResponse) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DumpResponse) DataProducerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DumpResponse) Type() FBS__DataProducer.Type {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return FBS__DataProducer.Type(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DumpResponse) MutateType(n FBS__DataProducer.Type) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *DumpResponse) SctpStreamParameters(obj *FBS__SctpParameters.SctpStreamParameters) *FBS__SctpParameters.SctpStreamParameters {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__SctpParameters.SctpStreamParameters)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DumpResponse) Label() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DumpResponse) Protocol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DumpResponse) BufferedAmountLowThreshold() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DumpResponse) MutateBufferedAmountLowThreshold(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *DumpResponse) Paused() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DumpResponse) MutatePaused(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *DumpResponse) DataProducerPaused() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DumpResponse) MutateDataProducerPaused(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *DumpResponse) Subchannels(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *DumpResponse) SubchannelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DumpResponse) MutateSubchannels(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func DumpResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func DumpResponseAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DumpResponseAddDataProducerId(builder *flatbuffers.Builder, dataProducerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dataProducerId), 0)
}
func DumpResponseAddType(builder *flatbuffers.Builder, type_ FBS__DataProducer.Type) {
	builder.PrependByteSlot(2, byte(type_), 0)
}
func DumpResponseAddSctpStreamParameters(builder *flatbuffers.Builder, sctpStreamParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sctpStreamParameters), 0)
}
func DumpResponseAddLabel(builder *flatbuffers.Builder, label flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(label), 0)
}
func DumpResponseAddProtocol(builder *flatbuffers.Builder, protocol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(protocol), 0)
}
func DumpResponseAddBufferedAmountLowThreshold(builder *flatbuffers.Builder, bufferedAmountLowThreshold uint32) {
	builder.PrependUint32Slot(6, bufferedAmountLowThreshold, 0)
}
func DumpResponseAddPaused(builder *flatbuffers.Builder, paused bool) {
	builder.PrependBoolSlot(7, paused, false)
}
func DumpResponseAddDataProducerPaused(builder *flatbuffers.Builder, dataProducerPaused bool) {
	builder.PrependBoolSlot(8, dataProducerPaused, false)
}
func DumpResponseAddSubchannels(builder *flatbuffers.Builder, subchannels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(subchannels), 0)
}
func DumpResponseStartSubchannelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func DumpResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
