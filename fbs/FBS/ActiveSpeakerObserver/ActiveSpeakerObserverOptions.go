// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ActiveSpeakerObserver

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ActiveSpeakerObserverOptionsT struct {
	Interval uint16 `json:"interval"`
}

func (t *ActiveSpeakerObserverOptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ActiveSpeakerObserverOptionsStart(builder)
	ActiveSpeakerObserverOptionsAddInterval(builder, t.Interval)
	return ActiveSpeakerObserverOptionsEnd(builder)
}

func (rcv *ActiveSpeakerObserverOptions) UnPackTo(t *ActiveSpeakerObserverOptionsT) {
	t.Interval = rcv.Interval()
}

func (rcv *ActiveSpeakerObserverOptions) UnPack() *ActiveSpeakerObserverOptionsT {
	if rcv == nil {
		return nil
	}
	t := &ActiveSpeakerObserverOptionsT{}
	rcv.UnPackTo(t)
	return t
}

type ActiveSpeakerObserverOptions struct {
	_tab flatbuffers.Table
}

func GetRootAsActiveSpeakerObserverOptions(buf []byte, offset flatbuffers.UOffsetT) *ActiveSpeakerObserverOptions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ActiveSpeakerObserverOptions{}
	x.Init(buf, n+offset)
	return x
}

func FinishActiveSpeakerObserverOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsActiveSpeakerObserverOptions(buf []byte, offset flatbuffers.UOffsetT) *ActiveSpeakerObserverOptions {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ActiveSpeakerObserverOptions{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedActiveSpeakerObserverOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ActiveSpeakerObserverOptions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ActiveSpeakerObserverOptions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ActiveSpeakerObserverOptions) Interval() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ActiveSpeakerObserverOptions) MutateInterval(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func ActiveSpeakerObserverOptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ActiveSpeakerObserverOptionsAddInterval(builder *flatbuffers.Builder, interval uint16) {
	builder.PrependUint16Slot(0, interval, 0)
}
func ActiveSpeakerObserverOptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
