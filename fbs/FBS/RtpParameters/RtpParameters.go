// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpParameters

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RtpParametersT struct {
	Mid string `json:"mid"`
	Codecs []*RtpCodecParametersT `json:"codecs"`
	HeaderExtensions []*RtpHeaderExtensionParametersT `json:"header_extensions"`
	Encodings []*RtpEncodingParametersT `json:"encodings"`
	Rtcp *RtcpParametersT `json:"rtcp"`
}

func (t *RtpParametersT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	midOffset := flatbuffers.UOffsetT(0)
	if t.Mid != "" {
		midOffset = builder.CreateString(t.Mid)
	}
	codecsOffset := flatbuffers.UOffsetT(0)
	if t.Codecs != nil {
		codecsLength := len(t.Codecs)
		codecsOffsets := make([]flatbuffers.UOffsetT, codecsLength)
		for j := 0; j < codecsLength; j++ {
			codecsOffsets[j] = t.Codecs[j].Pack(builder)
		}
		RtpParametersStartCodecsVector(builder, codecsLength)
		for j := codecsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(codecsOffsets[j])
		}
		codecsOffset = builder.EndVector(codecsLength)
	}
	headerExtensionsOffset := flatbuffers.UOffsetT(0)
	if t.HeaderExtensions != nil {
		headerExtensionsLength := len(t.HeaderExtensions)
		headerExtensionsOffsets := make([]flatbuffers.UOffsetT, headerExtensionsLength)
		for j := 0; j < headerExtensionsLength; j++ {
			headerExtensionsOffsets[j] = t.HeaderExtensions[j].Pack(builder)
		}
		RtpParametersStartHeaderExtensionsVector(builder, headerExtensionsLength)
		for j := headerExtensionsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(headerExtensionsOffsets[j])
		}
		headerExtensionsOffset = builder.EndVector(headerExtensionsLength)
	}
	encodingsOffset := flatbuffers.UOffsetT(0)
	if t.Encodings != nil {
		encodingsLength := len(t.Encodings)
		encodingsOffsets := make([]flatbuffers.UOffsetT, encodingsLength)
		for j := 0; j < encodingsLength; j++ {
			encodingsOffsets[j] = t.Encodings[j].Pack(builder)
		}
		RtpParametersStartEncodingsVector(builder, encodingsLength)
		for j := encodingsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(encodingsOffsets[j])
		}
		encodingsOffset = builder.EndVector(encodingsLength)
	}
	rtcpOffset := t.Rtcp.Pack(builder)
	RtpParametersStart(builder)
	RtpParametersAddMid(builder, midOffset)
	RtpParametersAddCodecs(builder, codecsOffset)
	RtpParametersAddHeaderExtensions(builder, headerExtensionsOffset)
	RtpParametersAddEncodings(builder, encodingsOffset)
	RtpParametersAddRtcp(builder, rtcpOffset)
	return RtpParametersEnd(builder)
}

func (rcv *RtpParameters) UnPackTo(t *RtpParametersT) {
	t.Mid = string(rcv.Mid())
	codecsLength := rcv.CodecsLength()
	t.Codecs = make([]*RtpCodecParametersT, codecsLength)
	for j := 0; j < codecsLength; j++ {
		x := RtpCodecParameters{}
		rcv.Codecs(&x, j)
		t.Codecs[j] = x.UnPack()
	}
	headerExtensionsLength := rcv.HeaderExtensionsLength()
	t.HeaderExtensions = make([]*RtpHeaderExtensionParametersT, headerExtensionsLength)
	for j := 0; j < headerExtensionsLength; j++ {
		x := RtpHeaderExtensionParameters{}
		rcv.HeaderExtensions(&x, j)
		t.HeaderExtensions[j] = x.UnPack()
	}
	encodingsLength := rcv.EncodingsLength()
	t.Encodings = make([]*RtpEncodingParametersT, encodingsLength)
	for j := 0; j < encodingsLength; j++ {
		x := RtpEncodingParameters{}
		rcv.Encodings(&x, j)
		t.Encodings[j] = x.UnPack()
	}
	t.Rtcp = rcv.Rtcp(nil).UnPack()
}

func (rcv *RtpParameters) UnPack() *RtpParametersT {
	if rcv == nil {
		return nil
	}
	t := &RtpParametersT{}
	rcv.UnPackTo(t)
	return t
}

type RtpParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsRtpParameters(buf []byte, offset flatbuffers.UOffsetT) *RtpParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RtpParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishRtpParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRtpParameters(buf []byte, offset flatbuffers.UOffsetT) *RtpParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RtpParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRtpParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RtpParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RtpParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RtpParameters) Mid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RtpParameters) Codecs(obj *RtpCodecParameters, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RtpParameters) CodecsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RtpParameters) HeaderExtensions(obj *RtpHeaderExtensionParameters, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RtpParameters) HeaderExtensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RtpParameters) Encodings(obj *RtpEncodingParameters, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RtpParameters) EncodingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RtpParameters) Rtcp(obj *RtcpParameters) *RtcpParameters {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RtcpParameters)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RtpParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func RtpParametersAddMid(builder *flatbuffers.Builder, mid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(mid), 0)
}
func RtpParametersAddCodecs(builder *flatbuffers.Builder, codecs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(codecs), 0)
}
func RtpParametersStartCodecsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RtpParametersAddHeaderExtensions(builder *flatbuffers.Builder, headerExtensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(headerExtensions), 0)
}
func RtpParametersStartHeaderExtensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RtpParametersAddEncodings(builder *flatbuffers.Builder, encodings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(encodings), 0)
}
func RtpParametersStartEncodingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RtpParametersAddRtcp(builder *flatbuffers.Builder, rtcp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(rtcp), 0)
}
func RtpParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
