// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpParameters

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RtpMappingT struct {
	Codecs []*CodecMappingT `json:"codecs"`
	Encodings []*EncodingMappingT `json:"encodings"`
}

func (t *RtpMappingT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	codecsOffset := flatbuffers.UOffsetT(0)
	if t.Codecs != nil {
		codecsLength := len(t.Codecs)
		codecsOffsets := make([]flatbuffers.UOffsetT, codecsLength)
		for j := 0; j < codecsLength; j++ {
			codecsOffsets[j] = t.Codecs[j].Pack(builder)
		}
		RtpMappingStartCodecsVector(builder, codecsLength)
		for j := codecsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(codecsOffsets[j])
		}
		codecsOffset = builder.EndVector(codecsLength)
	}
	encodingsOffset := flatbuffers.UOffsetT(0)
	if t.Encodings != nil {
		encodingsLength := len(t.Encodings)
		encodingsOffsets := make([]flatbuffers.UOffsetT, encodingsLength)
		for j := 0; j < encodingsLength; j++ {
			encodingsOffsets[j] = t.Encodings[j].Pack(builder)
		}
		RtpMappingStartEncodingsVector(builder, encodingsLength)
		for j := encodingsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(encodingsOffsets[j])
		}
		encodingsOffset = builder.EndVector(encodingsLength)
	}
	RtpMappingStart(builder)
	RtpMappingAddCodecs(builder, codecsOffset)
	RtpMappingAddEncodings(builder, encodingsOffset)
	return RtpMappingEnd(builder)
}

func (rcv *RtpMapping) UnPackTo(t *RtpMappingT) {
	codecsLength := rcv.CodecsLength()
	t.Codecs = make([]*CodecMappingT, codecsLength)
	for j := 0; j < codecsLength; j++ {
		x := CodecMapping{}
		rcv.Codecs(&x, j)
		t.Codecs[j] = x.UnPack()
	}
	encodingsLength := rcv.EncodingsLength()
	t.Encodings = make([]*EncodingMappingT, encodingsLength)
	for j := 0; j < encodingsLength; j++ {
		x := EncodingMapping{}
		rcv.Encodings(&x, j)
		t.Encodings[j] = x.UnPack()
	}
}

func (rcv *RtpMapping) UnPack() *RtpMappingT {
	if rcv == nil {
		return nil
	}
	t := &RtpMappingT{}
	rcv.UnPackTo(t)
	return t
}

type RtpMapping struct {
	_tab flatbuffers.Table
}

func GetRootAsRtpMapping(buf []byte, offset flatbuffers.UOffsetT) *RtpMapping {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RtpMapping{}
	x.Init(buf, n+offset)
	return x
}

func FinishRtpMappingBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRtpMapping(buf []byte, offset flatbuffers.UOffsetT) *RtpMapping {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RtpMapping{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRtpMappingBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RtpMapping) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RtpMapping) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RtpMapping) Codecs(obj *CodecMapping, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RtpMapping) CodecsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RtpMapping) Encodings(obj *EncodingMapping, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RtpMapping) EncodingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RtpMappingStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RtpMappingAddCodecs(builder *flatbuffers.Builder, codecs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(codecs), 0)
}
func RtpMappingStartCodecsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RtpMappingAddEncodings(builder *flatbuffers.Builder, encodings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(encodings), 0)
}
func RtpMappingStartEncodingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RtpMappingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
