// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpParameters

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RtpHeaderExtensionParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsRtpHeaderExtensionParameters(buf []byte, offset flatbuffers.UOffsetT) *RtpHeaderExtensionParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RtpHeaderExtensionParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishRtpHeaderExtensionParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRtpHeaderExtensionParameters(buf []byte, offset flatbuffers.UOffsetT) *RtpHeaderExtensionParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RtpHeaderExtensionParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRtpHeaderExtensionParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RtpHeaderExtensionParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RtpHeaderExtensionParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RtpHeaderExtensionParameters) Uri() RtpHeaderExtensionUri {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return RtpHeaderExtensionUri(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RtpHeaderExtensionParameters) MutateUri(n RtpHeaderExtensionUri) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *RtpHeaderExtensionParameters) Id() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RtpHeaderExtensionParameters) MutateId(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *RtpHeaderExtensionParameters) Encrypt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *RtpHeaderExtensionParameters) MutateEncrypt(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *RtpHeaderExtensionParameters) Parameters(obj *Parameter, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RtpHeaderExtensionParameters) ParametersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RtpHeaderExtensionParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RtpHeaderExtensionParametersAddUri(builder *flatbuffers.Builder, uri RtpHeaderExtensionUri) {
	builder.PrependByteSlot(0, byte(uri), 0)
}
func RtpHeaderExtensionParametersAddId(builder *flatbuffers.Builder, id byte) {
	builder.PrependByteSlot(1, id, 0)
}
func RtpHeaderExtensionParametersAddEncrypt(builder *flatbuffers.Builder, encrypt bool) {
	builder.PrependBoolSlot(2, encrypt, false)
}
func RtpHeaderExtensionParametersAddParameters(builder *flatbuffers.Builder, parameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(parameters), 0)
}
func RtpHeaderExtensionParametersStartParametersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RtpHeaderExtensionParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
