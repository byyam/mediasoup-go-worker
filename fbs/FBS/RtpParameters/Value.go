// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpParameters

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

type Value byte

const (
	ValueNONE           Value = 0
	ValueBoolean        Value = 1
	ValueInteger32      Value = 2
	ValueDouble         Value = 3
	ValueString         Value = 4
	ValueInteger32Array Value = 5
)

var EnumNamesValue = map[Value]string{
	ValueNONE:           "NONE",
	ValueBoolean:        "Boolean",
	ValueInteger32:      "Integer32",
	ValueDouble:         "Double",
	ValueString:         "String",
	ValueInteger32Array: "Integer32Array",
}

var EnumValuesValue = map[string]Value{
	"NONE":           ValueNONE,
	"Boolean":        ValueBoolean,
	"Integer32":      ValueInteger32,
	"Double":         ValueDouble,
	"String":         ValueString,
	"Integer32Array": ValueInteger32Array,
}

func (v Value) String() string {
	if s, ok := EnumNamesValue[v]; ok {
		return s
	}
	return "Value(" + strconv.FormatInt(int64(v), 10) + ")"
}

type ValueT struct {
	Type Value
	Value interface{}
}

func (t *ValueT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case ValueBoolean:
		return t.Value.(*BooleanT).Pack(builder)
	case ValueInteger32:
		return t.Value.(*Integer32T).Pack(builder)
	case ValueDouble:
		return t.Value.(*DoubleT).Pack(builder)
	case ValueString:
		return t.Value.(*StringT).Pack(builder)
	case ValueInteger32Array:
		return t.Value.(*Integer32ArrayT).Pack(builder)
	}
	return 0
}

func (rcv Value) UnPack(table flatbuffers.Table) *ValueT {
	switch rcv {
	case ValueBoolean:
		var x Boolean
		x.Init(table.Bytes, table.Pos)
		return &ValueT{Type: ValueBoolean, Value: x.UnPack()}
	case ValueInteger32:
		var x Integer32
		x.Init(table.Bytes, table.Pos)
		return &ValueT{Type: ValueInteger32, Value: x.UnPack()}
	case ValueDouble:
		var x Double
		x.Init(table.Bytes, table.Pos)
		return &ValueT{Type: ValueDouble, Value: x.UnPack()}
	case ValueString:
		var x String
		x.Init(table.Bytes, table.Pos)
		return &ValueT{Type: ValueString, Value: x.UnPack()}
	case ValueInteger32Array:
		var x Integer32Array
		x.Init(table.Bytes, table.Pos)
		return &ValueT{Type: ValueInteger32Array, Value: x.UnPack()}
	}
	return nil
}
