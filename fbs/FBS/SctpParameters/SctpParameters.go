// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SctpParameters

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SctpParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsSctpParameters(buf []byte, offset flatbuffers.UOffsetT) *SctpParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SctpParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishSctpParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSctpParameters(buf []byte, offset flatbuffers.UOffsetT) *SctpParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SctpParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSctpParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SctpParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SctpParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SctpParameters) Port() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 5000
}

func (rcv *SctpParameters) MutatePort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *SctpParameters) Os() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SctpParameters) MutateOs(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *SctpParameters) Mis() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SctpParameters) MutateMis(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *SctpParameters) MaxMessageSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SctpParameters) MutateMaxMessageSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *SctpParameters) SendBufferSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SctpParameters) MutateSendBufferSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *SctpParameters) SctpBufferedAmount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SctpParameters) MutateSctpBufferedAmount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *SctpParameters) IsDataChannel() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SctpParameters) MutateIsDataChannel(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func SctpParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func SctpParametersAddPort(builder *flatbuffers.Builder, port uint16) {
	builder.PrependUint16Slot(0, port, 5000)
}
func SctpParametersAddOs(builder *flatbuffers.Builder, os uint16) {
	builder.PrependUint16Slot(1, os, 0)
}
func SctpParametersAddMis(builder *flatbuffers.Builder, mis uint16) {
	builder.PrependUint16Slot(2, mis, 0)
}
func SctpParametersAddMaxMessageSize(builder *flatbuffers.Builder, maxMessageSize uint32) {
	builder.PrependUint32Slot(3, maxMessageSize, 0)
}
func SctpParametersAddSendBufferSize(builder *flatbuffers.Builder, sendBufferSize uint32) {
	builder.PrependUint32Slot(4, sendBufferSize, 0)
}
func SctpParametersAddSctpBufferedAmount(builder *flatbuffers.Builder, sctpBufferedAmount uint32) {
	builder.PrependUint32Slot(5, sctpBufferedAmount, 0)
}
func SctpParametersAddIsDataChannel(builder *flatbuffers.Builder, isDataChannel bool) {
	builder.PrependBoolSlot(6, isDataChannel, false)
}
func SctpParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
