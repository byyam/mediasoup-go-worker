// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SctpParameters

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SctpStreamParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsSctpStreamParameters(buf []byte, offset flatbuffers.UOffsetT) *SctpStreamParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SctpStreamParameters{}
	x.Init(buf, n+offset)
	return x
}

func FinishSctpStreamParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSctpStreamParameters(buf []byte, offset flatbuffers.UOffsetT) *SctpStreamParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SctpStreamParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSctpStreamParametersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SctpStreamParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SctpStreamParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SctpStreamParameters) StreamId() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SctpStreamParameters) MutateStreamId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *SctpStreamParameters) Ordered() *bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		v := rcv._tab.GetBool(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *SctpStreamParameters) MutateOrdered(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *SctpStreamParameters) MaxPacketLifeTime() *uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		v := rcv._tab.GetUint16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *SctpStreamParameters) MutateMaxPacketLifeTime(n uint16) bool {
	return rcv._tab.MutateUint16Slot(8, n)
}

func (rcv *SctpStreamParameters) MaxRetransmits() *uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		v := rcv._tab.GetUint16(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *SctpStreamParameters) MutateMaxRetransmits(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func SctpStreamParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SctpStreamParametersAddStreamId(builder *flatbuffers.Builder, streamId uint16) {
	builder.PrependUint16Slot(0, streamId, 0)
}
func SctpStreamParametersAddOrdered(builder *flatbuffers.Builder, ordered bool) {
	builder.PrependBool(ordered)
	builder.Slot(1)
}
func SctpStreamParametersAddMaxPacketLifeTime(builder *flatbuffers.Builder, maxPacketLifeTime uint16) {
	builder.PrependUint16(maxPacketLifeTime)
	builder.Slot(2)
}
func SctpStreamParametersAddMaxRetransmits(builder *flatbuffers.Builder, maxRetransmits uint16) {
	builder.PrependUint16(maxRetransmits)
	builder.Slot(3)
}
func SctpStreamParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
