// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SctpParameters

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NumSctpStreamsT struct {
	Os uint16 `json:"os"`
	Mis uint16 `json:"mis"`
}

func (t *NumSctpStreamsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	NumSctpStreamsStart(builder)
	NumSctpStreamsAddOs(builder, t.Os)
	NumSctpStreamsAddMis(builder, t.Mis)
	return NumSctpStreamsEnd(builder)
}

func (rcv *NumSctpStreams) UnPackTo(t *NumSctpStreamsT) {
	t.Os = rcv.Os()
	t.Mis = rcv.Mis()
}

func (rcv *NumSctpStreams) UnPack() *NumSctpStreamsT {
	if rcv == nil {
		return nil
	}
	t := &NumSctpStreamsT{}
	rcv.UnPackTo(t)
	return t
}

type NumSctpStreams struct {
	_tab flatbuffers.Table
}

func GetRootAsNumSctpStreams(buf []byte, offset flatbuffers.UOffsetT) *NumSctpStreams {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NumSctpStreams{}
	x.Init(buf, n+offset)
	return x
}

func FinishNumSctpStreamsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNumSctpStreams(buf []byte, offset flatbuffers.UOffsetT) *NumSctpStreams {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NumSctpStreams{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNumSctpStreamsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NumSctpStreams) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NumSctpStreams) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NumSctpStreams) Os() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 1024
}

func (rcv *NumSctpStreams) MutateOs(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *NumSctpStreams) Mis() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 1024
}

func (rcv *NumSctpStreams) MutateMis(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func NumSctpStreamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func NumSctpStreamsAddOs(builder *flatbuffers.Builder, os uint16) {
	builder.PrependUint16Slot(0, os, 1024)
}
func NumSctpStreamsAddMis(builder *flatbuffers.Builder, mis uint16) {
	builder.PrependUint16Slot(1, mis, 1024)
}
func NumSctpStreamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
