// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Router

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__DirectTransport "github.com/byyam/mediasoup-go-worker/fbs/FBS/DirectTransport"
)

type CreateDirectTransportRequestT struct {
	TransportId string `json:"transport_id"`
	Options *FBS__DirectTransport.DirectTransportOptionsT `json:"options"`
}

func (t *CreateDirectTransportRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	transportIdOffset := flatbuffers.UOffsetT(0)
	if t.TransportId != "" {
		transportIdOffset = builder.CreateString(t.TransportId)
	}
	optionsOffset := t.Options.Pack(builder)
	CreateDirectTransportRequestStart(builder)
	CreateDirectTransportRequestAddTransportId(builder, transportIdOffset)
	CreateDirectTransportRequestAddOptions(builder, optionsOffset)
	return CreateDirectTransportRequestEnd(builder)
}

func (rcv *CreateDirectTransportRequest) UnPackTo(t *CreateDirectTransportRequestT) {
	t.TransportId = string(rcv.TransportId())
	t.Options = rcv.Options(nil).UnPack()
}

func (rcv *CreateDirectTransportRequest) UnPack() *CreateDirectTransportRequestT {
	if rcv == nil {
		return nil
	}
	t := &CreateDirectTransportRequestT{}
	rcv.UnPackTo(t)
	return t
}

type CreateDirectTransportRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCreateDirectTransportRequest(buf []byte, offset flatbuffers.UOffsetT) *CreateDirectTransportRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CreateDirectTransportRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCreateDirectTransportRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCreateDirectTransportRequest(buf []byte, offset flatbuffers.UOffsetT) *CreateDirectTransportRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CreateDirectTransportRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCreateDirectTransportRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CreateDirectTransportRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CreateDirectTransportRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CreateDirectTransportRequest) TransportId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CreateDirectTransportRequest) Options(obj *FBS__DirectTransport.DirectTransportOptions) *FBS__DirectTransport.DirectTransportOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__DirectTransport.DirectTransportOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func CreateDirectTransportRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CreateDirectTransportRequestAddTransportId(builder *flatbuffers.Builder, transportId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(transportId), 0)
}
func CreateDirectTransportRequestAddOptions(builder *flatbuffers.Builder, options flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(options), 0)
}
func CreateDirectTransportRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
