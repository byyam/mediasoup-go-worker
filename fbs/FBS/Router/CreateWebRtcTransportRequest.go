// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Router

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__WebRtcTransport "github.com/byyam/mediasoup-go-worker/fbs/FBS/WebRtcTransport"
)

type CreateWebRtcTransportRequestT struct {
	TransportId string `json:"transport_id"`
	Options *FBS__WebRtcTransport.WebRtcTransportOptionsT `json:"options"`
}

func (t *CreateWebRtcTransportRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	transportIdOffset := flatbuffers.UOffsetT(0)
	if t.TransportId != "" {
		transportIdOffset = builder.CreateString(t.TransportId)
	}
	optionsOffset := t.Options.Pack(builder)
	CreateWebRtcTransportRequestStart(builder)
	CreateWebRtcTransportRequestAddTransportId(builder, transportIdOffset)
	CreateWebRtcTransportRequestAddOptions(builder, optionsOffset)
	return CreateWebRtcTransportRequestEnd(builder)
}

func (rcv *CreateWebRtcTransportRequest) UnPackTo(t *CreateWebRtcTransportRequestT) {
	t.TransportId = string(rcv.TransportId())
	t.Options = rcv.Options(nil).UnPack()
}

func (rcv *CreateWebRtcTransportRequest) UnPack() *CreateWebRtcTransportRequestT {
	if rcv == nil {
		return nil
	}
	t := &CreateWebRtcTransportRequestT{}
	rcv.UnPackTo(t)
	return t
}

type CreateWebRtcTransportRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCreateWebRtcTransportRequest(buf []byte, offset flatbuffers.UOffsetT) *CreateWebRtcTransportRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CreateWebRtcTransportRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCreateWebRtcTransportRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCreateWebRtcTransportRequest(buf []byte, offset flatbuffers.UOffsetT) *CreateWebRtcTransportRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CreateWebRtcTransportRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCreateWebRtcTransportRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CreateWebRtcTransportRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CreateWebRtcTransportRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CreateWebRtcTransportRequest) TransportId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CreateWebRtcTransportRequest) Options(obj *FBS__WebRtcTransport.WebRtcTransportOptions) *FBS__WebRtcTransport.WebRtcTransportOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__WebRtcTransport.WebRtcTransportOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func CreateWebRtcTransportRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CreateWebRtcTransportRequestAddTransportId(builder *flatbuffers.Builder, transportId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(transportId), 0)
}
func CreateWebRtcTransportRequestAddOptions(builder *flatbuffers.Builder, options flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(options), 0)
}
func CreateWebRtcTransportRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
