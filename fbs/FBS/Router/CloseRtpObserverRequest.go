// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Router

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CloseRtpObserverRequestT struct {
	RtpObserverId string `json:"rtp_observer_id"`
}

func (t *CloseRtpObserverRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	rtpObserverIdOffset := flatbuffers.UOffsetT(0)
	if t.RtpObserverId != "" {
		rtpObserverIdOffset = builder.CreateString(t.RtpObserverId)
	}
	CloseRtpObserverRequestStart(builder)
	CloseRtpObserverRequestAddRtpObserverId(builder, rtpObserverIdOffset)
	return CloseRtpObserverRequestEnd(builder)
}

func (rcv *CloseRtpObserverRequest) UnPackTo(t *CloseRtpObserverRequestT) {
	t.RtpObserverId = string(rcv.RtpObserverId())
}

func (rcv *CloseRtpObserverRequest) UnPack() *CloseRtpObserverRequestT {
	if rcv == nil {
		return nil
	}
	t := &CloseRtpObserverRequestT{}
	rcv.UnPackTo(t)
	return t
}

type CloseRtpObserverRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCloseRtpObserverRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseRtpObserverRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CloseRtpObserverRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCloseRtpObserverRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCloseRtpObserverRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseRtpObserverRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CloseRtpObserverRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCloseRtpObserverRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CloseRtpObserverRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CloseRtpObserverRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CloseRtpObserverRequest) RtpObserverId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CloseRtpObserverRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CloseRtpObserverRequestAddRtpObserverId(builder *flatbuffers.Builder, rtpObserverId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rtpObserverId), 0)
}
func CloseRtpObserverRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
