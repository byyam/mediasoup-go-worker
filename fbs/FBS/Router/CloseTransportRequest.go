// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Router

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CloseTransportRequestT struct {
	TransportId string `json:"transport_id"`
}

func (t *CloseTransportRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	transportIdOffset := flatbuffers.UOffsetT(0)
	if t.TransportId != "" {
		transportIdOffset = builder.CreateString(t.TransportId)
	}
	CloseTransportRequestStart(builder)
	CloseTransportRequestAddTransportId(builder, transportIdOffset)
	return CloseTransportRequestEnd(builder)
}

func (rcv *CloseTransportRequest) UnPackTo(t *CloseTransportRequestT) {
	t.TransportId = string(rcv.TransportId())
}

func (rcv *CloseTransportRequest) UnPack() *CloseTransportRequestT {
	if rcv == nil {
		return nil
	}
	t := &CloseTransportRequestT{}
	rcv.UnPackTo(t)
	return t
}

type CloseTransportRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCloseTransportRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseTransportRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CloseTransportRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCloseTransportRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCloseTransportRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseTransportRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CloseTransportRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCloseTransportRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CloseTransportRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CloseTransportRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CloseTransportRequest) TransportId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CloseTransportRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CloseTransportRequestAddTransportId(builder *flatbuffers.Builder, transportId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(transportId), 0)
}
func CloseTransportRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
