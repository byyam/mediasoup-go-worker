// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Worker

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResourceUsageResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsResourceUsageResponse(buf []byte, offset flatbuffers.UOffsetT) *ResourceUsageResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ResourceUsageResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishResourceUsageResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsResourceUsageResponse(buf []byte, offset flatbuffers.UOffsetT) *ResourceUsageResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ResourceUsageResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedResourceUsageResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ResourceUsageResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ResourceUsageResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ResourceUsageResponse) RuUtime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuUtime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ResourceUsageResponse) RuStime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuStime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *ResourceUsageResponse) RuMaxrss() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuMaxrss(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *ResourceUsageResponse) RuIxrss() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuIxrss(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *ResourceUsageResponse) RuIdrss() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuIdrss(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *ResourceUsageResponse) RuIsrss() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuIsrss(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *ResourceUsageResponse) RuMinflt() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuMinflt(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func (rcv *ResourceUsageResponse) RuMajflt() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuMajflt(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *ResourceUsageResponse) RuNswap() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuNswap(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func (rcv *ResourceUsageResponse) RuInblock() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuInblock(n uint64) bool {
	return rcv._tab.MutateUint64Slot(22, n)
}

func (rcv *ResourceUsageResponse) RuOublock() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuOublock(n uint64) bool {
	return rcv._tab.MutateUint64Slot(24, n)
}

func (rcv *ResourceUsageResponse) RuMsgsnd() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuMsgsnd(n uint64) bool {
	return rcv._tab.MutateUint64Slot(26, n)
}

func (rcv *ResourceUsageResponse) RuMsgrcv() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuMsgrcv(n uint64) bool {
	return rcv._tab.MutateUint64Slot(28, n)
}

func (rcv *ResourceUsageResponse) RuNsignals() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuNsignals(n uint64) bool {
	return rcv._tab.MutateUint64Slot(30, n)
}

func (rcv *ResourceUsageResponse) RuNvcsw() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuNvcsw(n uint64) bool {
	return rcv._tab.MutateUint64Slot(32, n)
}

func (rcv *ResourceUsageResponse) RuNivcsw() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResourceUsageResponse) MutateRuNivcsw(n uint64) bool {
	return rcv._tab.MutateUint64Slot(34, n)
}

func ResourceUsageResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func ResourceUsageResponseAddRuUtime(builder *flatbuffers.Builder, ruUtime uint64) {
	builder.PrependUint64Slot(0, ruUtime, 0)
}
func ResourceUsageResponseAddRuStime(builder *flatbuffers.Builder, ruStime uint64) {
	builder.PrependUint64Slot(1, ruStime, 0)
}
func ResourceUsageResponseAddRuMaxrss(builder *flatbuffers.Builder, ruMaxrss uint64) {
	builder.PrependUint64Slot(2, ruMaxrss, 0)
}
func ResourceUsageResponseAddRuIxrss(builder *flatbuffers.Builder, ruIxrss uint64) {
	builder.PrependUint64Slot(3, ruIxrss, 0)
}
func ResourceUsageResponseAddRuIdrss(builder *flatbuffers.Builder, ruIdrss uint64) {
	builder.PrependUint64Slot(4, ruIdrss, 0)
}
func ResourceUsageResponseAddRuIsrss(builder *flatbuffers.Builder, ruIsrss uint64) {
	builder.PrependUint64Slot(5, ruIsrss, 0)
}
func ResourceUsageResponseAddRuMinflt(builder *flatbuffers.Builder, ruMinflt uint64) {
	builder.PrependUint64Slot(6, ruMinflt, 0)
}
func ResourceUsageResponseAddRuMajflt(builder *flatbuffers.Builder, ruMajflt uint64) {
	builder.PrependUint64Slot(7, ruMajflt, 0)
}
func ResourceUsageResponseAddRuNswap(builder *flatbuffers.Builder, ruNswap uint64) {
	builder.PrependUint64Slot(8, ruNswap, 0)
}
func ResourceUsageResponseAddRuInblock(builder *flatbuffers.Builder, ruInblock uint64) {
	builder.PrependUint64Slot(9, ruInblock, 0)
}
func ResourceUsageResponseAddRuOublock(builder *flatbuffers.Builder, ruOublock uint64) {
	builder.PrependUint64Slot(10, ruOublock, 0)
}
func ResourceUsageResponseAddRuMsgsnd(builder *flatbuffers.Builder, ruMsgsnd uint64) {
	builder.PrependUint64Slot(11, ruMsgsnd, 0)
}
func ResourceUsageResponseAddRuMsgrcv(builder *flatbuffers.Builder, ruMsgrcv uint64) {
	builder.PrependUint64Slot(12, ruMsgrcv, 0)
}
func ResourceUsageResponseAddRuNsignals(builder *flatbuffers.Builder, ruNsignals uint64) {
	builder.PrependUint64Slot(13, ruNsignals, 0)
}
func ResourceUsageResponseAddRuNvcsw(builder *flatbuffers.Builder, ruNvcsw uint64) {
	builder.PrependUint64Slot(14, ruNvcsw, 0)
}
func ResourceUsageResponseAddRuNivcsw(builder *flatbuffers.Builder, ruNivcsw uint64) {
	builder.PrependUint64Slot(15, ruNivcsw, 0)
}
func ResourceUsageResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
