// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Worker

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChannelMessageHandlersT struct {
	ChannelRequestHandlers []string `json:"channel_request_handlers"`
	ChannelNotificationHandlers []string `json:"channel_notification_handlers"`
}

func (t *ChannelMessageHandlersT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	channelRequestHandlersOffset := flatbuffers.UOffsetT(0)
	if t.ChannelRequestHandlers != nil {
		channelRequestHandlersLength := len(t.ChannelRequestHandlers)
		channelRequestHandlersOffsets := make([]flatbuffers.UOffsetT, channelRequestHandlersLength)
		for j := 0; j < channelRequestHandlersLength; j++ {
			channelRequestHandlersOffsets[j] = builder.CreateString(t.ChannelRequestHandlers[j])
		}
		ChannelMessageHandlersStartChannelRequestHandlersVector(builder, channelRequestHandlersLength)
		for j := channelRequestHandlersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(channelRequestHandlersOffsets[j])
		}
		channelRequestHandlersOffset = builder.EndVector(channelRequestHandlersLength)
	}
	channelNotificationHandlersOffset := flatbuffers.UOffsetT(0)
	if t.ChannelNotificationHandlers != nil {
		channelNotificationHandlersLength := len(t.ChannelNotificationHandlers)
		channelNotificationHandlersOffsets := make([]flatbuffers.UOffsetT, channelNotificationHandlersLength)
		for j := 0; j < channelNotificationHandlersLength; j++ {
			channelNotificationHandlersOffsets[j] = builder.CreateString(t.ChannelNotificationHandlers[j])
		}
		ChannelMessageHandlersStartChannelNotificationHandlersVector(builder, channelNotificationHandlersLength)
		for j := channelNotificationHandlersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(channelNotificationHandlersOffsets[j])
		}
		channelNotificationHandlersOffset = builder.EndVector(channelNotificationHandlersLength)
	}
	ChannelMessageHandlersStart(builder)
	ChannelMessageHandlersAddChannelRequestHandlers(builder, channelRequestHandlersOffset)
	ChannelMessageHandlersAddChannelNotificationHandlers(builder, channelNotificationHandlersOffset)
	return ChannelMessageHandlersEnd(builder)
}

func (rcv *ChannelMessageHandlers) UnPackTo(t *ChannelMessageHandlersT) {
	channelRequestHandlersLength := rcv.ChannelRequestHandlersLength()
	t.ChannelRequestHandlers = make([]string, channelRequestHandlersLength)
	for j := 0; j < channelRequestHandlersLength; j++ {
		t.ChannelRequestHandlers[j] = string(rcv.ChannelRequestHandlers(j))
	}
	channelNotificationHandlersLength := rcv.ChannelNotificationHandlersLength()
	t.ChannelNotificationHandlers = make([]string, channelNotificationHandlersLength)
	for j := 0; j < channelNotificationHandlersLength; j++ {
		t.ChannelNotificationHandlers[j] = string(rcv.ChannelNotificationHandlers(j))
	}
}

func (rcv *ChannelMessageHandlers) UnPack() *ChannelMessageHandlersT {
	if rcv == nil {
		return nil
	}
	t := &ChannelMessageHandlersT{}
	rcv.UnPackTo(t)
	return t
}

type ChannelMessageHandlers struct {
	_tab flatbuffers.Table
}

func GetRootAsChannelMessageHandlers(buf []byte, offset flatbuffers.UOffsetT) *ChannelMessageHandlers {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChannelMessageHandlers{}
	x.Init(buf, n+offset)
	return x
}

func FinishChannelMessageHandlersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsChannelMessageHandlers(buf []byte, offset flatbuffers.UOffsetT) *ChannelMessageHandlers {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChannelMessageHandlers{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedChannelMessageHandlersBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ChannelMessageHandlers) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChannelMessageHandlers) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChannelMessageHandlers) ChannelRequestHandlers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ChannelMessageHandlers) ChannelRequestHandlersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ChannelMessageHandlers) ChannelNotificationHandlers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ChannelMessageHandlers) ChannelNotificationHandlersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ChannelMessageHandlersStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ChannelMessageHandlersAddChannelRequestHandlers(builder *flatbuffers.Builder, channelRequestHandlers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(channelRequestHandlers), 0)
}
func ChannelMessageHandlersStartChannelRequestHandlersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ChannelMessageHandlersAddChannelNotificationHandlers(builder *flatbuffers.Builder, channelNotificationHandlers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(channelNotificationHandlers), 0)
}
func ChannelMessageHandlersStartChannelNotificationHandlersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ChannelMessageHandlersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
