// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Worker

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CloseRouterRequestT struct {
	RouterId string `json:"router_id"`
}

func (t *CloseRouterRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	routerIdOffset := flatbuffers.UOffsetT(0)
	if t.RouterId != "" {
		routerIdOffset = builder.CreateString(t.RouterId)
	}
	CloseRouterRequestStart(builder)
	CloseRouterRequestAddRouterId(builder, routerIdOffset)
	return CloseRouterRequestEnd(builder)
}

func (rcv *CloseRouterRequest) UnPackTo(t *CloseRouterRequestT) {
	t.RouterId = string(rcv.RouterId())
}

func (rcv *CloseRouterRequest) UnPack() *CloseRouterRequestT {
	if rcv == nil {
		return nil
	}
	t := &CloseRouterRequestT{}
	rcv.UnPackTo(t)
	return t
}

type CloseRouterRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCloseRouterRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseRouterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CloseRouterRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCloseRouterRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCloseRouterRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseRouterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CloseRouterRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCloseRouterRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CloseRouterRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CloseRouterRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CloseRouterRequest) RouterId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CloseRouterRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CloseRouterRequestAddRouterId(builder *flatbuffers.Builder, routerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(routerId), 0)
}
func CloseRouterRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
