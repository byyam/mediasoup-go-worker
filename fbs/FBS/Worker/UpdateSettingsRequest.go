// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Worker

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UpdateSettingsRequestT struct {
	LogLevel string `json:"log_level"`
	LogTags []string `json:"log_tags"`
}

func (t *UpdateSettingsRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	logLevelOffset := flatbuffers.UOffsetT(0)
	if t.LogLevel != "" {
		logLevelOffset = builder.CreateString(t.LogLevel)
	}
	logTagsOffset := flatbuffers.UOffsetT(0)
	if t.LogTags != nil {
		logTagsLength := len(t.LogTags)
		logTagsOffsets := make([]flatbuffers.UOffsetT, logTagsLength)
		for j := 0; j < logTagsLength; j++ {
			logTagsOffsets[j] = builder.CreateString(t.LogTags[j])
		}
		UpdateSettingsRequestStartLogTagsVector(builder, logTagsLength)
		for j := logTagsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(logTagsOffsets[j])
		}
		logTagsOffset = builder.EndVector(logTagsLength)
	}
	UpdateSettingsRequestStart(builder)
	UpdateSettingsRequestAddLogLevel(builder, logLevelOffset)
	UpdateSettingsRequestAddLogTags(builder, logTagsOffset)
	return UpdateSettingsRequestEnd(builder)
}

func (rcv *UpdateSettingsRequest) UnPackTo(t *UpdateSettingsRequestT) {
	t.LogLevel = string(rcv.LogLevel())
	logTagsLength := rcv.LogTagsLength()
	t.LogTags = make([]string, logTagsLength)
	for j := 0; j < logTagsLength; j++ {
		t.LogTags[j] = string(rcv.LogTags(j))
	}
}

func (rcv *UpdateSettingsRequest) UnPack() *UpdateSettingsRequestT {
	if rcv == nil {
		return nil
	}
	t := &UpdateSettingsRequestT{}
	rcv.UnPackTo(t)
	return t
}

type UpdateSettingsRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsUpdateSettingsRequest(buf []byte, offset flatbuffers.UOffsetT) *UpdateSettingsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UpdateSettingsRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishUpdateSettingsRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsUpdateSettingsRequest(buf []byte, offset flatbuffers.UOffsetT) *UpdateSettingsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UpdateSettingsRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedUpdateSettingsRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *UpdateSettingsRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UpdateSettingsRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UpdateSettingsRequest) LogLevel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UpdateSettingsRequest) LogTags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *UpdateSettingsRequest) LogTagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func UpdateSettingsRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UpdateSettingsRequestAddLogLevel(builder *flatbuffers.Builder, logLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(logLevel), 0)
}
func UpdateSettingsRequestAddLogTags(builder *flatbuffers.Builder, logTags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(logTags), 0)
}
func UpdateSettingsRequestStartLogTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UpdateSettingsRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
