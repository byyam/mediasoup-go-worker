// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Worker

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CloseWebRtcServerRequestT struct {
	WebRtcServerId string `json:"web_rtc_server_id"`
}

func (t *CloseWebRtcServerRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	webRtcServerIdOffset := flatbuffers.UOffsetT(0)
	if t.WebRtcServerId != "" {
		webRtcServerIdOffset = builder.CreateString(t.WebRtcServerId)
	}
	CloseWebRtcServerRequestStart(builder)
	CloseWebRtcServerRequestAddWebRtcServerId(builder, webRtcServerIdOffset)
	return CloseWebRtcServerRequestEnd(builder)
}

func (rcv *CloseWebRtcServerRequest) UnPackTo(t *CloseWebRtcServerRequestT) {
	t.WebRtcServerId = string(rcv.WebRtcServerId())
}

func (rcv *CloseWebRtcServerRequest) UnPack() *CloseWebRtcServerRequestT {
	if rcv == nil {
		return nil
	}
	t := &CloseWebRtcServerRequestT{}
	rcv.UnPackTo(t)
	return t
}

type CloseWebRtcServerRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCloseWebRtcServerRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseWebRtcServerRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CloseWebRtcServerRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCloseWebRtcServerRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCloseWebRtcServerRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseWebRtcServerRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CloseWebRtcServerRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCloseWebRtcServerRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CloseWebRtcServerRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CloseWebRtcServerRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CloseWebRtcServerRequest) WebRtcServerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CloseWebRtcServerRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CloseWebRtcServerRequestAddWebRtcServerId(builder *flatbuffers.Builder, webRtcServerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(webRtcServerId), 0)
}
func CloseWebRtcServerRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
