// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Uint16String struct {
	_tab flatbuffers.Table
}

func GetRootAsUint16String(buf []byte, offset flatbuffers.UOffsetT) *Uint16String {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Uint16String{}
	x.Init(buf, n+offset)
	return x
}

func FinishUint16StringBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsUint16String(buf []byte, offset flatbuffers.UOffsetT) *Uint16String {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Uint16String{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedUint16StringBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Uint16String) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Uint16String) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Uint16String) Key() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Uint16String) MutateKey(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *Uint16String) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func Uint16StringStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Uint16StringAddKey(builder *flatbuffers.Builder, key uint16) {
	builder.PrependUint16Slot(0, key, 0)
}
func Uint16StringAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func Uint16StringEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
