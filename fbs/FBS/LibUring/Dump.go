// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LibUring

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DumpT struct {
	SqeProcessCount uint64 `json:"sqe_process_count"`
	SqeMissCount uint64 `json:"sqe_miss_count"`
	UserDataMissCount uint64 `json:"user_data_miss_count"`
}

func (t *DumpT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	DumpStart(builder)
	DumpAddSqeProcessCount(builder, t.SqeProcessCount)
	DumpAddSqeMissCount(builder, t.SqeMissCount)
	DumpAddUserDataMissCount(builder, t.UserDataMissCount)
	return DumpEnd(builder)
}

func (rcv *Dump) UnPackTo(t *DumpT) {
	t.SqeProcessCount = rcv.SqeProcessCount()
	t.SqeMissCount = rcv.SqeMissCount()
	t.UserDataMissCount = rcv.UserDataMissCount()
}

func (rcv *Dump) UnPack() *DumpT {
	if rcv == nil {
		return nil
	}
	t := &DumpT{}
	rcv.UnPackTo(t)
	return t
}

type Dump struct {
	_tab flatbuffers.Table
}

func GetRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Dump{}
	x.Init(buf, n+offset)
	return x
}

func FinishDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Dump{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Dump) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Dump) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Dump) SqeProcessCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Dump) MutateSqeProcessCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Dump) SqeMissCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Dump) MutateSqeMissCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Dump) UserDataMissCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Dump) MutateUserDataMissCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func DumpStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DumpAddSqeProcessCount(builder *flatbuffers.Builder, sqeProcessCount uint64) {
	builder.PrependUint64Slot(0, sqeProcessCount, 0)
}
func DumpAddSqeMissCount(builder *flatbuffers.Builder, sqeMissCount uint64) {
	builder.PrependUint64Slot(1, sqeMissCount, 0)
}
func DumpAddUserDataMissCount(builder *flatbuffers.Builder, userDataMissCount uint64) {
	builder.PrependUint64Slot(2, userDataMissCount, 0)
}
func DumpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
