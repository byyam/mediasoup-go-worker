// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Producer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Score struct {
	_tab flatbuffers.Table
}

func GetRootAsScore(buf []byte, offset flatbuffers.UOffsetT) *Score {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Score{}
	x.Init(buf, n+offset)
	return x
}

func FinishScoreBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsScore(buf []byte, offset flatbuffers.UOffsetT) *Score {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Score{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedScoreBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Score) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Score) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Score) EncodingIdx() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Score) MutateEncodingIdx(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Score) Ssrc() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Score) MutateSsrc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Score) Rid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Score) Score() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Score) MutateScore(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func ScoreStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ScoreAddEncodingIdx(builder *flatbuffers.Builder, encodingIdx uint32) {
	builder.PrependUint32Slot(0, encodingIdx, 0)
}
func ScoreAddSsrc(builder *flatbuffers.Builder, ssrc uint32) {
	builder.PrependUint32Slot(1, ssrc, 0)
}
func ScoreAddRid(builder *flatbuffers.Builder, rid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rid), 0)
}
func ScoreAddScore(builder *flatbuffers.Builder, score byte) {
	builder.PrependByteSlot(3, score, 0)
}
func ScoreEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
