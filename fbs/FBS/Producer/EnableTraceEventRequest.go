// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Producer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EnableTraceEventRequestT struct {
	Events []TraceEventType `json:"events"`
}

func (t *EnableTraceEventRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	eventsOffset := flatbuffers.UOffsetT(0)
	if t.Events != nil {
		eventsLength := len(t.Events)
		EnableTraceEventRequestStartEventsVector(builder, eventsLength)
		for j := eventsLength - 1; j >= 0; j-- {
			builder.PrependByte(byte(t.Events[j]))
		}
		eventsOffset = builder.EndVector(eventsLength)
	}
	EnableTraceEventRequestStart(builder)
	EnableTraceEventRequestAddEvents(builder, eventsOffset)
	return EnableTraceEventRequestEnd(builder)
}

func (rcv *EnableTraceEventRequest) UnPackTo(t *EnableTraceEventRequestT) {
	eventsLength := rcv.EventsLength()
	t.Events = make([]TraceEventType, eventsLength)
	for j := 0; j < eventsLength; j++ {
		t.Events[j] = rcv.Events(j)
	}
}

func (rcv *EnableTraceEventRequest) UnPack() *EnableTraceEventRequestT {
	if rcv == nil {
		return nil
	}
	t := &EnableTraceEventRequestT{}
	rcv.UnPackTo(t)
	return t
}

type EnableTraceEventRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsEnableTraceEventRequest(buf []byte, offset flatbuffers.UOffsetT) *EnableTraceEventRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EnableTraceEventRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEnableTraceEventRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEnableTraceEventRequest(buf []byte, offset flatbuffers.UOffsetT) *EnableTraceEventRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EnableTraceEventRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEnableTraceEventRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EnableTraceEventRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EnableTraceEventRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EnableTraceEventRequest) Events(j int) TraceEventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return TraceEventType(rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1)))
	}
	return 0
}

func (rcv *EnableTraceEventRequest) EventsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EnableTraceEventRequest) EventsBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EnableTraceEventRequest) MutateEvents(j int, n TraceEventType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), byte(n))
	}
	return false
}

func EnableTraceEventRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func EnableTraceEventRequestAddEvents(builder *flatbuffers.Builder, events flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(events), 0)
}
func EnableTraceEventRequestStartEventsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EnableTraceEventRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
