// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CloseDataConsumerRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCloseDataConsumerRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseDataConsumerRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CloseDataConsumerRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCloseDataConsumerRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCloseDataConsumerRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseDataConsumerRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CloseDataConsumerRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCloseDataConsumerRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CloseDataConsumerRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CloseDataConsumerRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CloseDataConsumerRequest) DataConsumerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CloseDataConsumerRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CloseDataConsumerRequestAddDataConsumerId(builder *flatbuffers.Builder, dataConsumerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dataConsumerId), 0)
}
func CloseDataConsumerRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
