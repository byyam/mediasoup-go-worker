// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__Common "github.com/byyam/mediasoup-go-worker/fbs/FBS/Common"
)

type TraceNotification struct {
	_tab flatbuffers.Table
}

func GetRootAsTraceNotification(buf []byte, offset flatbuffers.UOffsetT) *TraceNotification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TraceNotification{}
	x.Init(buf, n+offset)
	return x
}

func FinishTraceNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTraceNotification(buf []byte, offset flatbuffers.UOffsetT) *TraceNotification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TraceNotification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTraceNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TraceNotification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TraceNotification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TraceNotification) Type() TraceEventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TraceEventType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TraceNotification) MutateType(n TraceEventType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *TraceNotification) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TraceNotification) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *TraceNotification) Direction() FBS__Common.TraceDirection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return FBS__Common.TraceDirection(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TraceNotification) MutateDirection(n FBS__Common.TraceDirection) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *TraceNotification) InfoType() TraceInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return TraceInfo(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TraceNotification) MutateInfoType(n TraceInfo) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *TraceNotification) Info(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func TraceNotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func TraceNotificationAddType(builder *flatbuffers.Builder, type_ TraceEventType) {
	builder.PrependByteSlot(0, byte(type_), 0)
}
func TraceNotificationAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(1, timestamp, 0)
}
func TraceNotificationAddDirection(builder *flatbuffers.Builder, direction FBS__Common.TraceDirection) {
	builder.PrependByteSlot(2, byte(direction), 0)
}
func TraceNotificationAddInfoType(builder *flatbuffers.Builder, infoType TraceInfo) {
	builder.PrependByteSlot(3, byte(infoType), 0)
}
func TraceNotificationAddInfo(builder *flatbuffers.Builder, info flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(info), 0)
}
func TraceNotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
