// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__Common "FBS/Common"
	FBS__SctpAssociation "FBS/SctpAssociation"
	FBS__SctpParameters "FBS/SctpParameters"
)

type Dump struct {
	_tab flatbuffers.Table
}

func GetRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Dump{}
	x.Init(buf, n+offset)
	return x
}

func FinishDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Dump{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Dump) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Dump) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Dump) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Dump) Direct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Dump) MutateDirect(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *Dump) ProducerIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Dump) ProducerIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Dump) ConsumerIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Dump) ConsumerIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Dump) MapSsrcConsumerId(obj *FBS__Common.Uint32String, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Dump) MapSsrcConsumerIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Dump) MapRtxSsrcConsumerId(obj *FBS__Common.Uint32String, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Dump) MapRtxSsrcConsumerIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Dump) DataProducerIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Dump) DataProducerIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Dump) DataConsumerIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Dump) DataConsumerIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Dump) RecvRtpHeaderExtensions(obj *RecvRtpHeaderExtensions) *RecvRtpHeaderExtensions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RecvRtpHeaderExtensions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Dump) RtpListener(obj *RtpListener) *RtpListener {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RtpListener)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Dump) MaxMessageSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Dump) MutateMaxMessageSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(24, n)
}

func (rcv *Dump) SctpParameters(obj *FBS__SctpParameters.SctpParameters) *FBS__SctpParameters.SctpParameters {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__SctpParameters.SctpParameters)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Dump) SctpState() *FBS__SctpAssociation.SctpState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		v := FBS__SctpAssociation.SctpState(rcv._tab.GetByte(o + rcv._tab.Pos))
		return &v
	}
	return nil
}

func (rcv *Dump) MutateSctpState(n FBS__SctpAssociation.SctpState) bool {
	return rcv._tab.MutateByteSlot(28, byte(n))
}

func (rcv *Dump) SctpListener(obj *SctpListener) *SctpListener {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SctpListener)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Dump) TraceEventTypes(j int) TraceEventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return TraceEventType(rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1)))
	}
	return 0
}

func (rcv *Dump) TraceEventTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Dump) TraceEventTypesBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Dump) MutateTraceEventTypes(j int, n TraceEventType) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), byte(n))
	}
	return false
}

func DumpStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func DumpAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DumpAddDirect(builder *flatbuffers.Builder, direct bool) {
	builder.PrependBoolSlot(1, direct, false)
}
func DumpAddProducerIds(builder *flatbuffers.Builder, producerIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(producerIds), 0)
}
func DumpStartProducerIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpAddConsumerIds(builder *flatbuffers.Builder, consumerIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(consumerIds), 0)
}
func DumpStartConsumerIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpAddMapSsrcConsumerId(builder *flatbuffers.Builder, mapSsrcConsumerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(mapSsrcConsumerId), 0)
}
func DumpStartMapSsrcConsumerIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpAddMapRtxSsrcConsumerId(builder *flatbuffers.Builder, mapRtxSsrcConsumerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(mapRtxSsrcConsumerId), 0)
}
func DumpStartMapRtxSsrcConsumerIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpAddDataProducerIds(builder *flatbuffers.Builder, dataProducerIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(dataProducerIds), 0)
}
func DumpStartDataProducerIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpAddDataConsumerIds(builder *flatbuffers.Builder, dataConsumerIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(dataConsumerIds), 0)
}
func DumpStartDataConsumerIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpAddRecvRtpHeaderExtensions(builder *flatbuffers.Builder, recvRtpHeaderExtensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(recvRtpHeaderExtensions), 0)
}
func DumpAddRtpListener(builder *flatbuffers.Builder, rtpListener flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(rtpListener), 0)
}
func DumpAddMaxMessageSize(builder *flatbuffers.Builder, maxMessageSize uint32) {
	builder.PrependUint32Slot(10, maxMessageSize, 0)
}
func DumpAddSctpParameters(builder *flatbuffers.Builder, sctpParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(sctpParameters), 0)
}
func DumpAddSctpState(builder *flatbuffers.Builder, sctpState FBS__SctpAssociation.SctpState) {
	builder.PrependByte(byte(sctpState))
	builder.Slot(12)
}
func DumpAddSctpListener(builder *flatbuffers.Builder, sctpListener flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(sctpListener), 0)
}
func DumpAddTraceEventTypes(builder *flatbuffers.Builder, traceEventTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(traceEventTypes), 0)
}
func DumpStartTraceEventTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DumpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
