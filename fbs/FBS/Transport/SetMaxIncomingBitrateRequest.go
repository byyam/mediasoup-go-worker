// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SetMaxIncomingBitrateRequestT struct {
	MaxIncomingBitrate uint32 `json:"max_incoming_bitrate"`
}

func (t *SetMaxIncomingBitrateRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	SetMaxIncomingBitrateRequestStart(builder)
	SetMaxIncomingBitrateRequestAddMaxIncomingBitrate(builder, t.MaxIncomingBitrate)
	return SetMaxIncomingBitrateRequestEnd(builder)
}

func (rcv *SetMaxIncomingBitrateRequest) UnPackTo(t *SetMaxIncomingBitrateRequestT) {
	t.MaxIncomingBitrate = rcv.MaxIncomingBitrate()
}

func (rcv *SetMaxIncomingBitrateRequest) UnPack() *SetMaxIncomingBitrateRequestT {
	if rcv == nil {
		return nil
	}
	t := &SetMaxIncomingBitrateRequestT{}
	rcv.UnPackTo(t)
	return t
}

type SetMaxIncomingBitrateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSetMaxIncomingBitrateRequest(buf []byte, offset flatbuffers.UOffsetT) *SetMaxIncomingBitrateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetMaxIncomingBitrateRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSetMaxIncomingBitrateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSetMaxIncomingBitrateRequest(buf []byte, offset flatbuffers.UOffsetT) *SetMaxIncomingBitrateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetMaxIncomingBitrateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSetMaxIncomingBitrateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SetMaxIncomingBitrateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetMaxIncomingBitrateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SetMaxIncomingBitrateRequest) MaxIncomingBitrate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SetMaxIncomingBitrateRequest) MutateMaxIncomingBitrate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func SetMaxIncomingBitrateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SetMaxIncomingBitrateRequestAddMaxIncomingBitrate(builder *flatbuffers.Builder, maxIncomingBitrate uint32) {
	builder.PrependUint32Slot(0, maxIncomingBitrate, 0)
}
func SetMaxIncomingBitrateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
