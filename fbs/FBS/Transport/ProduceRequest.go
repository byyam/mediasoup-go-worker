// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__RtpParameters "github.com/byyam/mediasoup-go-worker/fbs/FBS/RtpParameters"
)

type ProduceRequestT struct {
	ProducerId string `json:"producer_id"`
	Kind FBS__RtpParameters.MediaKind `json:"kind"`
	RtpParameters *FBS__RtpParameters.RtpParametersT `json:"rtp_parameters"`
	RtpMapping *FBS__RtpParameters.RtpMappingT `json:"rtp_mapping"`
	KeyFrameRequestDelay uint32 `json:"key_frame_request_delay"`
	Paused bool `json:"paused"`
}

func (t *ProduceRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	producerIdOffset := flatbuffers.UOffsetT(0)
	if t.ProducerId != "" {
		producerIdOffset = builder.CreateString(t.ProducerId)
	}
	rtpParametersOffset := t.RtpParameters.Pack(builder)
	rtpMappingOffset := t.RtpMapping.Pack(builder)
	ProduceRequestStart(builder)
	ProduceRequestAddProducerId(builder, producerIdOffset)
	ProduceRequestAddKind(builder, t.Kind)
	ProduceRequestAddRtpParameters(builder, rtpParametersOffset)
	ProduceRequestAddRtpMapping(builder, rtpMappingOffset)
	ProduceRequestAddKeyFrameRequestDelay(builder, t.KeyFrameRequestDelay)
	ProduceRequestAddPaused(builder, t.Paused)
	return ProduceRequestEnd(builder)
}

func (rcv *ProduceRequest) UnPackTo(t *ProduceRequestT) {
	t.ProducerId = string(rcv.ProducerId())
	t.Kind = rcv.Kind()
	t.RtpParameters = rcv.RtpParameters(nil).UnPack()
	t.RtpMapping = rcv.RtpMapping(nil).UnPack()
	t.KeyFrameRequestDelay = rcv.KeyFrameRequestDelay()
	t.Paused = rcv.Paused()
}

func (rcv *ProduceRequest) UnPack() *ProduceRequestT {
	if rcv == nil {
		return nil
	}
	t := &ProduceRequestT{}
	rcv.UnPackTo(t)
	return t
}

type ProduceRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsProduceRequest(buf []byte, offset flatbuffers.UOffsetT) *ProduceRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProduceRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishProduceRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsProduceRequest(buf []byte, offset flatbuffers.UOffsetT) *ProduceRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProduceRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedProduceRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ProduceRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProduceRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProduceRequest) ProducerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ProduceRequest) Kind() FBS__RtpParameters.MediaKind {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return FBS__RtpParameters.MediaKind(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ProduceRequest) MutateKind(n FBS__RtpParameters.MediaKind) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *ProduceRequest) RtpParameters(obj *FBS__RtpParameters.RtpParameters) *FBS__RtpParameters.RtpParameters {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__RtpParameters.RtpParameters)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProduceRequest) RtpMapping(obj *FBS__RtpParameters.RtpMapping) *FBS__RtpParameters.RtpMapping {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__RtpParameters.RtpMapping)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProduceRequest) KeyFrameRequestDelay() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProduceRequest) MutateKeyFrameRequestDelay(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *ProduceRequest) Paused() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ProduceRequest) MutatePaused(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func ProduceRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ProduceRequestAddProducerId(builder *flatbuffers.Builder, producerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(producerId), 0)
}
func ProduceRequestAddKind(builder *flatbuffers.Builder, kind FBS__RtpParameters.MediaKind) {
	builder.PrependByteSlot(1, byte(kind), 0)
}
func ProduceRequestAddRtpParameters(builder *flatbuffers.Builder, rtpParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rtpParameters), 0)
}
func ProduceRequestAddRtpMapping(builder *flatbuffers.Builder, rtpMapping flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rtpMapping), 0)
}
func ProduceRequestAddKeyFrameRequestDelay(builder *flatbuffers.Builder, keyFrameRequestDelay uint32) {
	builder.PrependUint32Slot(4, keyFrameRequestDelay, 0)
}
func ProduceRequestAddPaused(builder *flatbuffers.Builder, paused bool) {
	builder.PrependBoolSlot(5, paused, false)
}
func ProduceRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
