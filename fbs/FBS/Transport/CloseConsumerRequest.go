// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CloseConsumerRequestT struct {
	ConsumerId string `json:"consumer_id"`
}

func (t *CloseConsumerRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	consumerIdOffset := flatbuffers.UOffsetT(0)
	if t.ConsumerId != "" {
		consumerIdOffset = builder.CreateString(t.ConsumerId)
	}
	CloseConsumerRequestStart(builder)
	CloseConsumerRequestAddConsumerId(builder, consumerIdOffset)
	return CloseConsumerRequestEnd(builder)
}

func (rcv *CloseConsumerRequest) UnPackTo(t *CloseConsumerRequestT) {
	t.ConsumerId = string(rcv.ConsumerId())
}

func (rcv *CloseConsumerRequest) UnPack() *CloseConsumerRequestT {
	if rcv == nil {
		return nil
	}
	t := &CloseConsumerRequestT{}
	rcv.UnPackTo(t)
	return t
}

type CloseConsumerRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCloseConsumerRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseConsumerRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CloseConsumerRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCloseConsumerRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCloseConsumerRequest(buf []byte, offset flatbuffers.UOffsetT) *CloseConsumerRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CloseConsumerRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCloseConsumerRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CloseConsumerRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CloseConsumerRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CloseConsumerRequest) ConsumerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CloseConsumerRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func CloseConsumerRequestAddConsumerId(builder *flatbuffers.Builder, consumerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(consumerId), 0)
}
func CloseConsumerRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
