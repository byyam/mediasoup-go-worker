// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ListenInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsListenInfo(buf []byte, offset flatbuffers.UOffsetT) *ListenInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ListenInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishListenInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsListenInfo(buf []byte, offset flatbuffers.UOffsetT) *ListenInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ListenInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedListenInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ListenInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ListenInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ListenInfo) Protocol() Protocol {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Protocol(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 1
}

func (rcv *ListenInfo) MutateProtocol(n Protocol) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ListenInfo) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ListenInfo) AnnouncedIp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ListenInfo) Port() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListenInfo) MutatePort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *ListenInfo) Flags(obj *SocketFlags) *SocketFlags {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SocketFlags)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListenInfo) SendBufferSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListenInfo) MutateSendBufferSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *ListenInfo) RecvBufferSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListenInfo) MutateRecvBufferSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func ListenInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ListenInfoAddProtocol(builder *flatbuffers.Builder, protocol Protocol) {
	builder.PrependByteSlot(0, byte(protocol), 1)
}
func ListenInfoAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ip), 0)
}
func ListenInfoAddAnnouncedIp(builder *flatbuffers.Builder, announcedIp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(announcedIp), 0)
}
func ListenInfoAddPort(builder *flatbuffers.Builder, port uint16) {
	builder.PrependUint16Slot(3, port, 0)
}
func ListenInfoAddFlags(builder *flatbuffers.Builder, flags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(flags), 0)
}
func ListenInfoAddSendBufferSize(builder *flatbuffers.Builder, sendBufferSize uint32) {
	builder.PrependUint32Slot(5, sendBufferSize, 0)
}
func ListenInfoAddRecvBufferSize(builder *flatbuffers.Builder, recvBufferSize uint32) {
	builder.PrependUint32Slot(6, recvBufferSize, 0)
}
func ListenInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
