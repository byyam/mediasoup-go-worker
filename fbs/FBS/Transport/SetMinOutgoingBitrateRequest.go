// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SetMinOutgoingBitrateRequestT struct {
	MinOutgoingBitrate uint32 `json:"min_outgoing_bitrate"`
}

func (t *SetMinOutgoingBitrateRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	SetMinOutgoingBitrateRequestStart(builder)
	SetMinOutgoingBitrateRequestAddMinOutgoingBitrate(builder, t.MinOutgoingBitrate)
	return SetMinOutgoingBitrateRequestEnd(builder)
}

func (rcv *SetMinOutgoingBitrateRequest) UnPackTo(t *SetMinOutgoingBitrateRequestT) {
	t.MinOutgoingBitrate = rcv.MinOutgoingBitrate()
}

func (rcv *SetMinOutgoingBitrateRequest) UnPack() *SetMinOutgoingBitrateRequestT {
	if rcv == nil {
		return nil
	}
	t := &SetMinOutgoingBitrateRequestT{}
	rcv.UnPackTo(t)
	return t
}

type SetMinOutgoingBitrateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSetMinOutgoingBitrateRequest(buf []byte, offset flatbuffers.UOffsetT) *SetMinOutgoingBitrateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetMinOutgoingBitrateRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSetMinOutgoingBitrateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSetMinOutgoingBitrateRequest(buf []byte, offset flatbuffers.UOffsetT) *SetMinOutgoingBitrateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetMinOutgoingBitrateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSetMinOutgoingBitrateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SetMinOutgoingBitrateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetMinOutgoingBitrateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SetMinOutgoingBitrateRequest) MinOutgoingBitrate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SetMinOutgoingBitrateRequest) MutateMinOutgoingBitrate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func SetMinOutgoingBitrateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func SetMinOutgoingBitrateRequestAddMinOutgoingBitrate(builder *flatbuffers.Builder, minOutgoingBitrate uint32) {
	builder.PrependUint32Slot(0, minOutgoingBitrate, 0)
}
func SetMinOutgoingBitrateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
