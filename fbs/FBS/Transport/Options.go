// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__SctpParameters "github.com/byyam/mediasoup-go-worker/fbs/FBS/SctpParameters"
)

type OptionsT struct {
	Direct bool `json:"direct"`
	MaxMessageSize *uint32 `json:"max_message_size"`
	InitialAvailableOutgoingBitrate *uint32 `json:"initial_available_outgoing_bitrate"`
	EnableSctp bool `json:"enable_sctp"`
	NumSctpStreams *FBS__SctpParameters.NumSctpStreamsT `json:"num_sctp_streams"`
	MaxSctpMessageSize uint32 `json:"max_sctp_message_size"`
	SctpSendBufferSize uint32 `json:"sctp_send_buffer_size"`
	IsDataChannel bool `json:"is_data_channel"`
}

func (t *OptionsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	numSctpStreamsOffset := t.NumSctpStreams.Pack(builder)
	OptionsStart(builder)
	OptionsAddDirect(builder, t.Direct)
	if t.MaxMessageSize != nil {
		OptionsAddMaxMessageSize(builder, *t.MaxMessageSize)
	}
	if t.InitialAvailableOutgoingBitrate != nil {
		OptionsAddInitialAvailableOutgoingBitrate(builder, *t.InitialAvailableOutgoingBitrate)
	}
	OptionsAddEnableSctp(builder, t.EnableSctp)
	OptionsAddNumSctpStreams(builder, numSctpStreamsOffset)
	OptionsAddMaxSctpMessageSize(builder, t.MaxSctpMessageSize)
	OptionsAddSctpSendBufferSize(builder, t.SctpSendBufferSize)
	OptionsAddIsDataChannel(builder, t.IsDataChannel)
	return OptionsEnd(builder)
}

func (rcv *Options) UnPackTo(t *OptionsT) {
	t.Direct = rcv.Direct()
	t.MaxMessageSize = rcv.MaxMessageSize()
	t.InitialAvailableOutgoingBitrate = rcv.InitialAvailableOutgoingBitrate()
	t.EnableSctp = rcv.EnableSctp()
	t.NumSctpStreams = rcv.NumSctpStreams(nil).UnPack()
	t.MaxSctpMessageSize = rcv.MaxSctpMessageSize()
	t.SctpSendBufferSize = rcv.SctpSendBufferSize()
	t.IsDataChannel = rcv.IsDataChannel()
}

func (rcv *Options) UnPack() *OptionsT {
	if rcv == nil {
		return nil
	}
	t := &OptionsT{}
	rcv.UnPackTo(t)
	return t
}

type Options struct {
	_tab flatbuffers.Table
}

func GetRootAsOptions(buf []byte, offset flatbuffers.UOffsetT) *Options {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Options{}
	x.Init(buf, n+offset)
	return x
}

func FinishOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOptions(buf []byte, offset flatbuffers.UOffsetT) *Options {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Options{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOptionsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Options) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Options) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Options) Direct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Options) MutateDirect(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

/// Only needed for DirectTransport. This value is handled by base Transport.
func (rcv *Options) MaxMessageSize() *uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		v := rcv._tab.GetUint32(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

/// Only needed for DirectTransport. This value is handled by base Transport.
func (rcv *Options) MutateMaxMessageSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Options) InitialAvailableOutgoingBitrate() *uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		v := rcv._tab.GetUint32(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *Options) MutateInitialAvailableOutgoingBitrate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Options) EnableSctp() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Options) MutateEnableSctp(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *Options) NumSctpStreams(obj *FBS__SctpParameters.NumSctpStreams) *FBS__SctpParameters.NumSctpStreams {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__SctpParameters.NumSctpStreams)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Options) MaxSctpMessageSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Options) MutateMaxSctpMessageSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *Options) SctpSendBufferSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Options) MutateSctpSendBufferSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *Options) IsDataChannel() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Options) MutateIsDataChannel(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func OptionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func OptionsAddDirect(builder *flatbuffers.Builder, direct bool) {
	builder.PrependBoolSlot(0, direct, false)
}
func OptionsAddMaxMessageSize(builder *flatbuffers.Builder, maxMessageSize uint32) {
	builder.PrependUint32(maxMessageSize)
	builder.Slot(1)
}
func OptionsAddInitialAvailableOutgoingBitrate(builder *flatbuffers.Builder, initialAvailableOutgoingBitrate uint32) {
	builder.PrependUint32(initialAvailableOutgoingBitrate)
	builder.Slot(2)
}
func OptionsAddEnableSctp(builder *flatbuffers.Builder, enableSctp bool) {
	builder.PrependBoolSlot(3, enableSctp, false)
}
func OptionsAddNumSctpStreams(builder *flatbuffers.Builder, numSctpStreams flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(numSctpStreams), 0)
}
func OptionsAddMaxSctpMessageSize(builder *flatbuffers.Builder, maxSctpMessageSize uint32) {
	builder.PrependUint32Slot(5, maxSctpMessageSize, 0)
}
func OptionsAddSctpSendBufferSize(builder *flatbuffers.Builder, sctpSendBufferSize uint32) {
	builder.PrependUint32Slot(6, sctpSendBufferSize, 0)
}
func OptionsAddIsDataChannel(builder *flatbuffers.Builder, isDataChannel bool) {
	builder.PrependBoolSlot(7, isDataChannel, false)
}
func OptionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
