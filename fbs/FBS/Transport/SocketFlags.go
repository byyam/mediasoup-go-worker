// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SocketFlags struct {
	_tab flatbuffers.Table
}

func GetRootAsSocketFlags(buf []byte, offset flatbuffers.UOffsetT) *SocketFlags {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SocketFlags{}
	x.Init(buf, n+offset)
	return x
}

func FinishSocketFlagsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSocketFlags(buf []byte, offset flatbuffers.UOffsetT) *SocketFlags {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SocketFlags{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSocketFlagsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SocketFlags) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SocketFlags) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SocketFlags) Ipv6Only() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SocketFlags) MutateIpv6Only(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *SocketFlags) UdpReusePort() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SocketFlags) MutateUdpReusePort(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func SocketFlagsStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SocketFlagsAddIpv6Only(builder *flatbuffers.Builder, ipv6Only bool) {
	builder.PrependBoolSlot(0, ipv6Only, false)
}
func SocketFlagsAddUdpReusePort(builder *flatbuffers.Builder, udpReusePort bool) {
	builder.PrependBoolSlot(1, udpReusePort, false)
}
func SocketFlagsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
