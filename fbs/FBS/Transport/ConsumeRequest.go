// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transport

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__Consumer "FBS/Consumer"
	FBS__RtpParameters "FBS/RtpParameters"
)

type ConsumeRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsConsumeRequest(buf []byte, offset flatbuffers.UOffsetT) *ConsumeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsumeRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishConsumeRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsConsumeRequest(buf []byte, offset flatbuffers.UOffsetT) *ConsumeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ConsumeRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConsumeRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ConsumeRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsumeRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsumeRequest) ConsumerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConsumeRequest) ProducerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConsumeRequest) Kind() FBS__RtpParameters.MediaKind {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return FBS__RtpParameters.MediaKind(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConsumeRequest) MutateKind(n FBS__RtpParameters.MediaKind) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *ConsumeRequest) RtpParameters(obj *FBS__RtpParameters.RtpParameters) *FBS__RtpParameters.RtpParameters {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__RtpParameters.RtpParameters)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ConsumeRequest) Type() FBS__RtpParameters.Type {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return FBS__RtpParameters.Type(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ConsumeRequest) MutateType(n FBS__RtpParameters.Type) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *ConsumeRequest) ConsumableRtpEncodings(obj *FBS__RtpParameters.RtpEncodingParameters, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ConsumeRequest) ConsumableRtpEncodingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConsumeRequest) Paused() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConsumeRequest) MutatePaused(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *ConsumeRequest) PreferredLayers(obj *FBS__Consumer.ConsumerLayers) *FBS__Consumer.ConsumerLayers {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__Consumer.ConsumerLayers)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ConsumeRequest) IgnoreDtx() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConsumeRequest) MutateIgnoreDtx(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func ConsumeRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func ConsumeRequestAddConsumerId(builder *flatbuffers.Builder, consumerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(consumerId), 0)
}
func ConsumeRequestAddProducerId(builder *flatbuffers.Builder, producerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(producerId), 0)
}
func ConsumeRequestAddKind(builder *flatbuffers.Builder, kind FBS__RtpParameters.MediaKind) {
	builder.PrependByteSlot(2, byte(kind), 0)
}
func ConsumeRequestAddRtpParameters(builder *flatbuffers.Builder, rtpParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rtpParameters), 0)
}
func ConsumeRequestAddType(builder *flatbuffers.Builder, type_ FBS__RtpParameters.Type) {
	builder.PrependByteSlot(4, byte(type_), 0)
}
func ConsumeRequestAddConsumableRtpEncodings(builder *flatbuffers.Builder, consumableRtpEncodings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(consumableRtpEncodings), 0)
}
func ConsumeRequestStartConsumableRtpEncodingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ConsumeRequestAddPaused(builder *flatbuffers.Builder, paused bool) {
	builder.PrependBoolSlot(6, paused, false)
}
func ConsumeRequestAddPreferredLayers(builder *flatbuffers.Builder, preferredLayers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(preferredLayers), 0)
}
func ConsumeRequestAddIgnoreDtx(builder *flatbuffers.Builder, ignoreDtx bool) {
	builder.PrependBoolSlot(8, ignoreDtx, false)
}
func ConsumeRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
