// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpStream

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SendStats struct {
	_tab flatbuffers.Table
}

func GetRootAsSendStats(buf []byte, offset flatbuffers.UOffsetT) *SendStats {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SendStats{}
	x.Init(buf, n+offset)
	return x
}

func FinishSendStatsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSendStats(buf []byte, offset flatbuffers.UOffsetT) *SendStats {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SendStats{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSendStatsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SendStats) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SendStats) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SendStats) Base(obj *Stats) *Stats {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Stats)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SendStats) PacketCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SendStats) MutatePacketCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *SendStats) ByteCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SendStats) MutateByteCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *SendStats) Bitrate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SendStats) MutateBitrate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func SendStatsStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SendStatsAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func SendStatsAddPacketCount(builder *flatbuffers.Builder, packetCount uint64) {
	builder.PrependUint64Slot(1, packetCount, 0)
}
func SendStatsAddByteCount(builder *flatbuffers.Builder, byteCount uint64) {
	builder.PrependUint64Slot(2, byteCount, 0)
}
func SendStatsAddBitrate(builder *flatbuffers.Builder, bitrate uint32) {
	builder.PrependUint32Slot(3, bitrate, 0)
}
func SendStatsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
