// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpStream

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__RtxStream "github.com/byyam/mediasoup-go-worker/fbs/FBS/RtxStream"
)

type DumpT struct {
	Params *ParamsT `json:"params"`
	Score byte `json:"score"`
	RtxStream *FBS__RtxStream.RtxDumpT `json:"rtx_stream"`
}

func (t *DumpT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	paramsOffset := t.Params.Pack(builder)
	rtxStreamOffset := t.RtxStream.Pack(builder)
	DumpStart(builder)
	DumpAddParams(builder, paramsOffset)
	DumpAddScore(builder, t.Score)
	DumpAddRtxStream(builder, rtxStreamOffset)
	return DumpEnd(builder)
}

func (rcv *Dump) UnPackTo(t *DumpT) {
	t.Params = rcv.Params(nil).UnPack()
	t.Score = rcv.Score()
	t.RtxStream = rcv.RtxStream(nil).UnPack()
}

func (rcv *Dump) UnPack() *DumpT {
	if rcv == nil {
		return nil
	}
	t := &DumpT{}
	rcv.UnPackTo(t)
	return t
}

type Dump struct {
	_tab flatbuffers.Table
}

func GetRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Dump{}
	x.Init(buf, n+offset)
	return x
}

func FinishDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDump(buf []byte, offset flatbuffers.UOffsetT) *Dump {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Dump{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDumpBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Dump) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Dump) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Dump) Params(obj *Params) *Params {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Params)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Dump) Score() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Dump) MutateScore(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Dump) RtxStream(obj *FBS__RtxStream.RtxDump) *FBS__RtxStream.RtxDump {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FBS__RtxStream.RtxDump)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DumpStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DumpAddParams(builder *flatbuffers.Builder, params flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(params), 0)
}
func DumpAddScore(builder *flatbuffers.Builder, score byte) {
	builder.PrependByteSlot(1, score, 0)
}
func DumpAddRtxStream(builder *flatbuffers.Builder, rtxStream flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rtxStream), 0)
}
func DumpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
