// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpStream

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

type StatsData byte

const (
	StatsDataNONE      StatsData = 0
	StatsDataBaseStats StatsData = 1
	StatsDataRecvStats StatsData = 2
	StatsDataSendStats StatsData = 3
)

var EnumNamesStatsData = map[StatsData]string{
	StatsDataNONE:      "NONE",
	StatsDataBaseStats: "BaseStats",
	StatsDataRecvStats: "RecvStats",
	StatsDataSendStats: "SendStats",
}

var EnumValuesStatsData = map[string]StatsData{
	"NONE":      StatsDataNONE,
	"BaseStats": StatsDataBaseStats,
	"RecvStats": StatsDataRecvStats,
	"SendStats": StatsDataSendStats,
}

func (v StatsData) String() string {
	if s, ok := EnumNamesStatsData[v]; ok {
		return s
	}
	return "StatsData(" + strconv.FormatInt(int64(v), 10) + ")"
}

type StatsDataT struct {
	Type StatsData
	Value interface{}
}

func (t *StatsDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case StatsDataBaseStats:
		return t.Value.(*BaseStatsT).Pack(builder)
	case StatsDataRecvStats:
		return t.Value.(*RecvStatsT).Pack(builder)
	case StatsDataSendStats:
		return t.Value.(*SendStatsT).Pack(builder)
	}
	return 0
}

func (rcv StatsData) UnPack(table flatbuffers.Table) *StatsDataT {
	switch rcv {
	case StatsDataBaseStats:
		var x BaseStats
		x.Init(table.Bytes, table.Pos)
		return &StatsDataT{Type: StatsDataBaseStats, Value: x.UnPack()}
	case StatsDataRecvStats:
		var x RecvStats
		x.Init(table.Bytes, table.Pos)
		return &StatsDataT{Type: StatsDataRecvStats, Value: x.UnPack()}
	case StatsDataSendStats:
		var x SendStats
		x.Init(table.Bytes, table.Pos)
		return &StatsDataT{Type: StatsDataSendStats, Value: x.UnPack()}
	}
	return nil
}
