// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpStream

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Params struct {
	_tab flatbuffers.Table
}

func GetRootAsParams(buf []byte, offset flatbuffers.UOffsetT) *Params {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Params{}
	x.Init(buf, n+offset)
	return x
}

func FinishParamsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsParams(buf []byte, offset flatbuffers.UOffsetT) *Params {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Params{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedParamsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Params) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Params) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Params) EncodingIdx() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutateEncodingIdx(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Params) Ssrc() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutateSsrc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Params) PayloadType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutatePayloadType(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Params) MimeType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Params) ClockRate() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutateClockRate(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *Params) Rid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Params) Cname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Params) RtxSsrc() *uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		v := rcv._tab.GetUint32(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *Params) MutateRtxSsrc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *Params) RtxPayloadType() *byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		v := rcv._tab.GetByte(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *Params) MutateRtxPayloadType(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func (rcv *Params) UseNack() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Params) MutateUseNack(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

func (rcv *Params) UsePli() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Params) MutateUsePli(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

func (rcv *Params) UseFir() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Params) MutateUseFir(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

func (rcv *Params) UseInBandFec() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Params) MutateUseInBandFec(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

func (rcv *Params) UseDtx() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Params) MutateUseDtx(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

func (rcv *Params) SpatialLayers() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutateSpatialLayers(n byte) bool {
	return rcv._tab.MutateByteSlot(32, n)
}

func (rcv *Params) TemporalLayers() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Params) MutateTemporalLayers(n byte) bool {
	return rcv._tab.MutateByteSlot(34, n)
}

func ParamsStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func ParamsAddEncodingIdx(builder *flatbuffers.Builder, encodingIdx uint32) {
	builder.PrependUint32Slot(0, encodingIdx, 0)
}
func ParamsAddSsrc(builder *flatbuffers.Builder, ssrc uint32) {
	builder.PrependUint32Slot(1, ssrc, 0)
}
func ParamsAddPayloadType(builder *flatbuffers.Builder, payloadType byte) {
	builder.PrependByteSlot(2, payloadType, 0)
}
func ParamsAddMimeType(builder *flatbuffers.Builder, mimeType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(mimeType), 0)
}
func ParamsAddClockRate(builder *flatbuffers.Builder, clockRate uint32) {
	builder.PrependUint32Slot(4, clockRate, 0)
}
func ParamsAddRid(builder *flatbuffers.Builder, rid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rid), 0)
}
func ParamsAddCname(builder *flatbuffers.Builder, cname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(cname), 0)
}
func ParamsAddRtxSsrc(builder *flatbuffers.Builder, rtxSsrc uint32) {
	builder.PrependUint32(rtxSsrc)
	builder.Slot(7)
}
func ParamsAddRtxPayloadType(builder *flatbuffers.Builder, rtxPayloadType byte) {
	builder.PrependByte(rtxPayloadType)
	builder.Slot(8)
}
func ParamsAddUseNack(builder *flatbuffers.Builder, useNack bool) {
	builder.PrependBoolSlot(9, useNack, false)
}
func ParamsAddUsePli(builder *flatbuffers.Builder, usePli bool) {
	builder.PrependBoolSlot(10, usePli, false)
}
func ParamsAddUseFir(builder *flatbuffers.Builder, useFir bool) {
	builder.PrependBoolSlot(11, useFir, false)
}
func ParamsAddUseInBandFec(builder *flatbuffers.Builder, useInBandFec bool) {
	builder.PrependBoolSlot(12, useInBandFec, false)
}
func ParamsAddUseDtx(builder *flatbuffers.Builder, useDtx bool) {
	builder.PrependBoolSlot(13, useDtx, false)
}
func ParamsAddSpatialLayers(builder *flatbuffers.Builder, spatialLayers byte) {
	builder.PrependByteSlot(14, spatialLayers, 0)
}
func ParamsAddTemporalLayers(builder *flatbuffers.Builder, temporalLayers byte) {
	builder.PrependByteSlot(15, temporalLayers, 0)
}
func ParamsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
