// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RtpStream

import (
	flatbuffers "github.com/google/flatbuffers/go"

	FBS__RtpParameters "FBS/RtpParameters"
)

type BaseStats struct {
	_tab flatbuffers.Table
}

func GetRootAsBaseStats(buf []byte, offset flatbuffers.UOffsetT) *BaseStats {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BaseStats{}
	x.Init(buf, n+offset)
	return x
}

func FinishBaseStatsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBaseStats(buf []byte, offset flatbuffers.UOffsetT) *BaseStats {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BaseStats{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBaseStatsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BaseStats) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BaseStats) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BaseStats) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *BaseStats) Ssrc() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateSsrc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *BaseStats) Kind() FBS__RtpParameters.MediaKind {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return FBS__RtpParameters.MediaKind(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BaseStats) MutateKind(n FBS__RtpParameters.MediaKind) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *BaseStats) MimeType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BaseStats) PacketsLost() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutatePacketsLost(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *BaseStats) FractionLost() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateFractionLost(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *BaseStats) PacketsDiscarded() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutatePacketsDiscarded(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func (rcv *BaseStats) PacketsRetransmitted() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutatePacketsRetransmitted(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *BaseStats) PacketsRepaired() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutatePacketsRepaired(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func (rcv *BaseStats) NackCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateNackCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(22, n)
}

func (rcv *BaseStats) NackPacketCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateNackPacketCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(24, n)
}

func (rcv *BaseStats) PliCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutatePliCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(26, n)
}

func (rcv *BaseStats) FirCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateFirCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(28, n)
}

func (rcv *BaseStats) Score() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateScore(n byte) bool {
	return rcv._tab.MutateByteSlot(30, n)
}

func (rcv *BaseStats) Rid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BaseStats) RtxSsrc() *uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		v := rcv._tab.GetUint32(o + rcv._tab.Pos)
		return &v
	}
	return nil
}

func (rcv *BaseStats) MutateRtxSsrc(n uint32) bool {
	return rcv._tab.MutateUint32Slot(34, n)
}

func (rcv *BaseStats) RtxPacketsDiscarded() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BaseStats) MutateRtxPacketsDiscarded(n uint64) bool {
	return rcv._tab.MutateUint64Slot(36, n)
}

func (rcv *BaseStats) RoundTripTime() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BaseStats) MutateRoundTripTime(n float32) bool {
	return rcv._tab.MutateFloat32Slot(38, n)
}

func BaseStatsStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func BaseStatsAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(0, timestamp, 0)
}
func BaseStatsAddSsrc(builder *flatbuffers.Builder, ssrc uint32) {
	builder.PrependUint32Slot(1, ssrc, 0)
}
func BaseStatsAddKind(builder *flatbuffers.Builder, kind FBS__RtpParameters.MediaKind) {
	builder.PrependByteSlot(2, byte(kind), 0)
}
func BaseStatsAddMimeType(builder *flatbuffers.Builder, mimeType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(mimeType), 0)
}
func BaseStatsAddPacketsLost(builder *flatbuffers.Builder, packetsLost uint64) {
	builder.PrependUint64Slot(4, packetsLost, 0)
}
func BaseStatsAddFractionLost(builder *flatbuffers.Builder, fractionLost byte) {
	builder.PrependByteSlot(5, fractionLost, 0)
}
func BaseStatsAddPacketsDiscarded(builder *flatbuffers.Builder, packetsDiscarded uint64) {
	builder.PrependUint64Slot(6, packetsDiscarded, 0)
}
func BaseStatsAddPacketsRetransmitted(builder *flatbuffers.Builder, packetsRetransmitted uint64) {
	builder.PrependUint64Slot(7, packetsRetransmitted, 0)
}
func BaseStatsAddPacketsRepaired(builder *flatbuffers.Builder, packetsRepaired uint64) {
	builder.PrependUint64Slot(8, packetsRepaired, 0)
}
func BaseStatsAddNackCount(builder *flatbuffers.Builder, nackCount uint64) {
	builder.PrependUint64Slot(9, nackCount, 0)
}
func BaseStatsAddNackPacketCount(builder *flatbuffers.Builder, nackPacketCount uint64) {
	builder.PrependUint64Slot(10, nackPacketCount, 0)
}
func BaseStatsAddPliCount(builder *flatbuffers.Builder, pliCount uint64) {
	builder.PrependUint64Slot(11, pliCount, 0)
}
func BaseStatsAddFirCount(builder *flatbuffers.Builder, firCount uint64) {
	builder.PrependUint64Slot(12, firCount, 0)
}
func BaseStatsAddScore(builder *flatbuffers.Builder, score byte) {
	builder.PrependByteSlot(13, score, 0)
}
func BaseStatsAddRid(builder *flatbuffers.Builder, rid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(rid), 0)
}
func BaseStatsAddRtxSsrc(builder *flatbuffers.Builder, rtxSsrc uint32) {
	builder.PrependUint32(rtxSsrc)
	builder.Slot(15)
}
func BaseStatsAddRtxPacketsDiscarded(builder *flatbuffers.Builder, rtxPacketsDiscarded uint64) {
	builder.PrependUint64Slot(16, rtxPacketsDiscarded, 0)
}
func BaseStatsAddRoundTripTime(builder *flatbuffers.Builder, roundTripTime float32) {
	builder.PrependFloat32Slot(17, roundTripTime, 0.0)
}
func BaseStatsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
