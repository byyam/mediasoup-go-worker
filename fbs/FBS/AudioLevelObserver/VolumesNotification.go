// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AudioLevelObserver

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type VolumesNotificationT struct {
	Volumes []*VolumeT `json:"volumes"`
}

func (t *VolumesNotificationT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	volumesOffset := flatbuffers.UOffsetT(0)
	if t.Volumes != nil {
		volumesLength := len(t.Volumes)
		volumesOffsets := make([]flatbuffers.UOffsetT, volumesLength)
		for j := 0; j < volumesLength; j++ {
			volumesOffsets[j] = t.Volumes[j].Pack(builder)
		}
		VolumesNotificationStartVolumesVector(builder, volumesLength)
		for j := volumesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(volumesOffsets[j])
		}
		volumesOffset = builder.EndVector(volumesLength)
	}
	VolumesNotificationStart(builder)
	VolumesNotificationAddVolumes(builder, volumesOffset)
	return VolumesNotificationEnd(builder)
}

func (rcv *VolumesNotification) UnPackTo(t *VolumesNotificationT) {
	volumesLength := rcv.VolumesLength()
	t.Volumes = make([]*VolumeT, volumesLength)
	for j := 0; j < volumesLength; j++ {
		x := Volume{}
		rcv.Volumes(&x, j)
		t.Volumes[j] = x.UnPack()
	}
}

func (rcv *VolumesNotification) UnPack() *VolumesNotificationT {
	if rcv == nil {
		return nil
	}
	t := &VolumesNotificationT{}
	rcv.UnPackTo(t)
	return t
}

type VolumesNotification struct {
	_tab flatbuffers.Table
}

func GetRootAsVolumesNotification(buf []byte, offset flatbuffers.UOffsetT) *VolumesNotification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VolumesNotification{}
	x.Init(buf, n+offset)
	return x
}

func FinishVolumesNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsVolumesNotification(buf []byte, offset flatbuffers.UOffsetT) *VolumesNotification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &VolumesNotification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVolumesNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *VolumesNotification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *VolumesNotification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *VolumesNotification) Volumes(obj *Volume, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *VolumesNotification) VolumesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func VolumesNotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func VolumesNotificationAddVolumes(builder *flatbuffers.Builder, volumes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(volumes), 0)
}
func VolumesNotificationStartVolumesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func VolumesNotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
