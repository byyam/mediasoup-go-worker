// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Request

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RequestT struct {
	Id uint32 `json:"id"`
	Method Method `json:"method"`
	HandlerId string `json:"handler_id"`
	Body *BodyT `json:"body"`
}

func (t *RequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	handlerIdOffset := flatbuffers.UOffsetT(0)
	if t.HandlerId != "" {
		handlerIdOffset = builder.CreateString(t.HandlerId)
	}
	bodyOffset := t.Body.Pack(builder)

	RequestStart(builder)
	RequestAddId(builder, t.Id)
	RequestAddMethod(builder, t.Method)
	RequestAddHandlerId(builder, handlerIdOffset)
	if t.Body != nil {
		RequestAddBodyType(builder, t.Body.Type)
	}
	RequestAddBody(builder, bodyOffset)
	return RequestEnd(builder)
}

func (rcv *Request) UnPackTo(t *RequestT) {
	t.Id = rcv.Id()
	t.Method = rcv.Method()
	t.HandlerId = string(rcv.HandlerId())
	bodyTable := flatbuffers.Table{}
	if rcv.Body(&bodyTable) {
		t.Body = rcv.BodyType().UnPack(bodyTable)
	}
}

func (rcv *Request) UnPack() *RequestT {
	if rcv == nil {
		return nil
	}
	t := &RequestT{}
	rcv.UnPackTo(t)
	return t
}

type Request struct {
	_tab flatbuffers.Table
}

func GetRootAsRequest(buf []byte, offset flatbuffers.UOffsetT) *Request {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Request{}
	x.Init(buf, n+offset)
	return x
}

func FinishRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRequest(buf []byte, offset flatbuffers.UOffsetT) *Request {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Request{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Request) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Request) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Request) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Request) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *Request) Method() Method {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Method(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Request) MutateMethod(n Method) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *Request) HandlerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Request) BodyType() Body {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Body(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Request) MutateBodyType(n Body) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *Request) Body(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func RequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func RequestAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func RequestAddMethod(builder *flatbuffers.Builder, method Method) {
	builder.PrependByteSlot(1, byte(method), 0)
}
func RequestAddHandlerId(builder *flatbuffers.Builder, handlerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(handlerId), 0)
}
func RequestAddBodyType(builder *flatbuffers.Builder, bodyType Body) {
	builder.PrependByteSlot(3, byte(bodyType), 0)
}
func RequestAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(body), 0)
}
func RequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
