// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebRtcServer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IpPort struct {
	_tab flatbuffers.Table
}

func GetRootAsIpPort(buf []byte, offset flatbuffers.UOffsetT) *IpPort {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IpPort{}
	x.Init(buf, n+offset)
	return x
}

func FinishIpPortBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsIpPort(buf []byte, offset flatbuffers.UOffsetT) *IpPort {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IpPort{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIpPortBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *IpPort) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IpPort) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *IpPort) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *IpPort) Port() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *IpPort) MutatePort(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func IpPortStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func IpPortAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ip), 0)
}
func IpPortAddPort(builder *flatbuffers.Builder, port uint16) {
	builder.PrependUint16Slot(1, port, 0)
}
func IpPortEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
