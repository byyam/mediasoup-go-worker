// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WebRtcServer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DumpResponseT struct {
	Id string `json:"id"`
	UdpSockets []*IpPortT `json:"udp_sockets"`
	TcpServers []*IpPortT `json:"tcp_servers"`
	WebRtcTransportIds []string `json:"web_rtc_transport_ids"`
	LocalIceUsernameFragments []*IceUserNameFragmentT `json:"local_ice_username_fragments"`
	TupleHashes []*TupleHashT `json:"tuple_hashes"`
}

func (t *DumpResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	idOffset := flatbuffers.UOffsetT(0)
	if t.Id != "" {
		idOffset = builder.CreateString(t.Id)
	}
	udpSocketsOffset := flatbuffers.UOffsetT(0)
	if t.UdpSockets != nil {
		udpSocketsLength := len(t.UdpSockets)
		udpSocketsOffsets := make([]flatbuffers.UOffsetT, udpSocketsLength)
		for j := 0; j < udpSocketsLength; j++ {
			udpSocketsOffsets[j] = t.UdpSockets[j].Pack(builder)
		}
		DumpResponseStartUdpSocketsVector(builder, udpSocketsLength)
		for j := udpSocketsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(udpSocketsOffsets[j])
		}
		udpSocketsOffset = builder.EndVector(udpSocketsLength)
	}
	tcpServersOffset := flatbuffers.UOffsetT(0)
	if t.TcpServers != nil {
		tcpServersLength := len(t.TcpServers)
		tcpServersOffsets := make([]flatbuffers.UOffsetT, tcpServersLength)
		for j := 0; j < tcpServersLength; j++ {
			tcpServersOffsets[j] = t.TcpServers[j].Pack(builder)
		}
		DumpResponseStartTcpServersVector(builder, tcpServersLength)
		for j := tcpServersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(tcpServersOffsets[j])
		}
		tcpServersOffset = builder.EndVector(tcpServersLength)
	}
	webRtcTransportIdsOffset := flatbuffers.UOffsetT(0)
	if t.WebRtcTransportIds != nil {
		webRtcTransportIdsLength := len(t.WebRtcTransportIds)
		webRtcTransportIdsOffsets := make([]flatbuffers.UOffsetT, webRtcTransportIdsLength)
		for j := 0; j < webRtcTransportIdsLength; j++ {
			webRtcTransportIdsOffsets[j] = builder.CreateString(t.WebRtcTransportIds[j])
		}
		DumpResponseStartWebRtcTransportIdsVector(builder, webRtcTransportIdsLength)
		for j := webRtcTransportIdsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(webRtcTransportIdsOffsets[j])
		}
		webRtcTransportIdsOffset = builder.EndVector(webRtcTransportIdsLength)
	}
	localIceUsernameFragmentsOffset := flatbuffers.UOffsetT(0)
	if t.LocalIceUsernameFragments != nil {
		localIceUsernameFragmentsLength := len(t.LocalIceUsernameFragments)
		localIceUsernameFragmentsOffsets := make([]flatbuffers.UOffsetT, localIceUsernameFragmentsLength)
		for j := 0; j < localIceUsernameFragmentsLength; j++ {
			localIceUsernameFragmentsOffsets[j] = t.LocalIceUsernameFragments[j].Pack(builder)
		}
		DumpResponseStartLocalIceUsernameFragmentsVector(builder, localIceUsernameFragmentsLength)
		for j := localIceUsernameFragmentsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(localIceUsernameFragmentsOffsets[j])
		}
		localIceUsernameFragmentsOffset = builder.EndVector(localIceUsernameFragmentsLength)
	}
	tupleHashesOffset := flatbuffers.UOffsetT(0)
	if t.TupleHashes != nil {
		tupleHashesLength := len(t.TupleHashes)
		tupleHashesOffsets := make([]flatbuffers.UOffsetT, tupleHashesLength)
		for j := 0; j < tupleHashesLength; j++ {
			tupleHashesOffsets[j] = t.TupleHashes[j].Pack(builder)
		}
		DumpResponseStartTupleHashesVector(builder, tupleHashesLength)
		for j := tupleHashesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(tupleHashesOffsets[j])
		}
		tupleHashesOffset = builder.EndVector(tupleHashesLength)
	}
	DumpResponseStart(builder)
	DumpResponseAddId(builder, idOffset)
	DumpResponseAddUdpSockets(builder, udpSocketsOffset)
	DumpResponseAddTcpServers(builder, tcpServersOffset)
	DumpResponseAddWebRtcTransportIds(builder, webRtcTransportIdsOffset)
	DumpResponseAddLocalIceUsernameFragments(builder, localIceUsernameFragmentsOffset)
	DumpResponseAddTupleHashes(builder, tupleHashesOffset)
	return DumpResponseEnd(builder)
}

func (rcv *DumpResponse) UnPackTo(t *DumpResponseT) {
	t.Id = string(rcv.Id())
	udpSocketsLength := rcv.UdpSocketsLength()
	t.UdpSockets = make([]*IpPortT, udpSocketsLength)
	for j := 0; j < udpSocketsLength; j++ {
		x := IpPort{}
		rcv.UdpSockets(&x, j)
		t.UdpSockets[j] = x.UnPack()
	}
	tcpServersLength := rcv.TcpServersLength()
	t.TcpServers = make([]*IpPortT, tcpServersLength)
	for j := 0; j < tcpServersLength; j++ {
		x := IpPort{}
		rcv.TcpServers(&x, j)
		t.TcpServers[j] = x.UnPack()
	}
	webRtcTransportIdsLength := rcv.WebRtcTransportIdsLength()
	t.WebRtcTransportIds = make([]string, webRtcTransportIdsLength)
	for j := 0; j < webRtcTransportIdsLength; j++ {
		t.WebRtcTransportIds[j] = string(rcv.WebRtcTransportIds(j))
	}
	localIceUsernameFragmentsLength := rcv.LocalIceUsernameFragmentsLength()
	t.LocalIceUsernameFragments = make([]*IceUserNameFragmentT, localIceUsernameFragmentsLength)
	for j := 0; j < localIceUsernameFragmentsLength; j++ {
		x := IceUserNameFragment{}
		rcv.LocalIceUsernameFragments(&x, j)
		t.LocalIceUsernameFragments[j] = x.UnPack()
	}
	tupleHashesLength := rcv.TupleHashesLength()
	t.TupleHashes = make([]*TupleHashT, tupleHashesLength)
	for j := 0; j < tupleHashesLength; j++ {
		x := TupleHash{}
		rcv.TupleHashes(&x, j)
		t.TupleHashes[j] = x.UnPack()
	}
}

func (rcv *DumpResponse) UnPack() *DumpResponseT {
	if rcv == nil {
		return nil
	}
	t := &DumpResponseT{}
	rcv.UnPackTo(t)
	return t
}

type DumpResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsDumpResponse(buf []byte, offset flatbuffers.UOffsetT) *DumpResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DumpResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishDumpResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDumpResponse(buf []byte, offset flatbuffers.UOffsetT) *DumpResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DumpResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDumpResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DumpResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DumpResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DumpResponse) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DumpResponse) UdpSockets(obj *IpPort, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DumpResponse) UdpSocketsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DumpResponse) TcpServers(obj *IpPort, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DumpResponse) TcpServersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DumpResponse) WebRtcTransportIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DumpResponse) WebRtcTransportIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DumpResponse) LocalIceUsernameFragments(obj *IceUserNameFragment, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DumpResponse) LocalIceUsernameFragmentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DumpResponse) TupleHashes(obj *TupleHash, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DumpResponse) TupleHashesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DumpResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DumpResponseAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DumpResponseAddUdpSockets(builder *flatbuffers.Builder, udpSockets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(udpSockets), 0)
}
func DumpResponseStartUdpSocketsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpResponseAddTcpServers(builder *flatbuffers.Builder, tcpServers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tcpServers), 0)
}
func DumpResponseStartTcpServersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpResponseAddWebRtcTransportIds(builder *flatbuffers.Builder, webRtcTransportIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(webRtcTransportIds), 0)
}
func DumpResponseStartWebRtcTransportIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpResponseAddLocalIceUsernameFragments(builder *flatbuffers.Builder, localIceUsernameFragments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(localIceUsernameFragments), 0)
}
func DumpResponseStartLocalIceUsernameFragmentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpResponseAddTupleHashes(builder *flatbuffers.Builder, tupleHashes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tupleHashes), 0)
}
func DumpResponseStartTupleHashesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DumpResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
